
from ctypes import c_void_p, c_long
import torch
import math
import random
from torch import empty_strided, as_strided, device
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
async_compile = AsyncCompile()


kernel_cpp_0 = async_compile.cpp('''
#include "/tmp/torchinductor_jenkins/ao/caomrguwaptybystzop6sbmdii67jqxwyhyzjizs5gbwosh2mdkg.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       long* out_ptr3)
{
    {
        {
            float tmp1 = 0;
            float tmp2 = -std::numeric_limits<float>::infinity();
            float tmp3 = std::numeric_limits<float>::infinity();
            struct IndexValue_10 {size_t index; float value;};
            IndexValue_10 tmp4{0, -std::numeric_limits<float>::infinity()};
            #pragma omp declare reduction(argmax : struct IndexValue_10 :\
                omp_out.value = omp_in.value < omp_out.value ? omp_out.value : omp_in.value,\
                omp_out.index = omp_in.value < omp_out.value ? omp_out.index : omp_in.index)\
            	initializer(omp_priv = {0, -std::numeric_limits<float>::infinity()})
            #pragma omp parallel num_threads(4)
            {
                #pragma omp for reduction(+:tmp1) reduction(max:tmp2) reduction(min:tmp3) reduction(argmax:tmp4) 
                for(long i0=0; i0<4; i0+=1)
                {
                    auto tmp0 = in_ptr0[i0];
                    tmp1 += tmp0;
                    tmp2 = std::max(tmp2, tmp0);
                    tmp3 = std::min(tmp3, tmp0);
                    if (tmp4.value < tmp0) {
                        tmp4.index = i0; tmp4.value = tmp0;
                    }
                }
            }
            out_ptr0[0] = tmp1;
            out_ptr1[0] = tmp2;
            out_ptr2[0] = tmp3;
            out_ptr3[0] = tmp4.index;
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    arg0_1, = args
    args.clear()
    buf0 = empty_strided((), (), device='cpu', dtype=torch.float32)
    buf1 = empty_strided((), (), device='cpu', dtype=torch.float32)
    buf2 = empty_strided((), (), device='cpu', dtype=torch.float32)
    buf3 = empty_strided((), (), device='cpu', dtype=torch.int64)
    kernel_cpp_0(c_void_p(arg0_1.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(buf1.data_ptr()), c_void_p(buf2.data_ptr()), c_void_p(buf3.data_ptr()))
    del arg0_1
    return (buf0, buf1, buf2, buf3, )


def benchmark_compiled_module():
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    arg0_1 = rand_strided((4, ), (1, ), device='cpu', dtype=torch.float32)
    print_performance(lambda: call([arg0_1]))


if __name__ == "__main__":
    import argparse
    from torch._inductor.utils import benchmark_all_kernels

    parser = argparse.ArgumentParser()
    parser.add_argument("--benchmark-kernels", "-k", action="store_true", help="Whether to benchmark each individual kernels")
    parser.add_argument("--benchmark-all-configs", "-c", action="store_true", help="Whether to benchmark each individual config for a kernel")
    args = parser.parse_args()

    if args.benchmark_kernels:
        benchmark_all_kernels('None', args.benchmark_all_configs)
    else:
        benchmark_compiled_module()

