
from ctypes import c_void_p, c_long
import torch
import math
import random
from torch import empty_strided, as_strided, device
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
async_compile = AsyncCompile()


kernel_cpp_0 = async_compile.cpp('''
#include "/tmp/torchinductor_jenkins/ao/caomrguwaptybystzop6sbmdii67jqxwyhyzjizs5gbwosh2mdkg.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    #pragma omp parallel num_threads(4)
    {
        {
            #pragma omp for
            for(long i0=0; i0<64; i0+=1)
            {
                auto tmp0 = in_ptr0[i0];
                auto tmp1 = static_cast<float>(1);
                auto tmp2 = tmp0 + tmp1;
                auto tmp3 = static_cast<float>(3);
                auto tmp4 = tmp2 + tmp3;
                auto tmp5 = static_cast<float>(0);
                auto tmp6 = (tmp5 != tmp5) ? tmp5 : std::max(tmp4, tmp5);
                auto tmp7 = static_cast<float>(6);
                auto tmp8 = (tmp7 != tmp7) ? tmp7 : std::min(tmp6, tmp7);
                auto tmp9 = tmp2 * tmp8;
                auto tmp10 = tmp9 / tmp7;
                auto tmp11 = static_cast<float>(-1);
                auto tmp12 = (tmp11 != tmp11) ? tmp11 : std::max(tmp2, tmp11);
                auto tmp13 = (tmp1 != tmp1) ? tmp1 : std::min(tmp12, tmp1);
                auto tmp14 = tmp2 > tmp5;
                auto tmp15 = static_cast<float>(0.01);
                auto tmp16 = tmp2 * tmp15;
                auto tmp17 = tmp14 ? tmp2 : tmp16;
                auto tmp18 = decltype(tmp2)(1) / (decltype(tmp2)(1) + std::exp(-tmp2));
                auto tmp19 = tmp2 * tmp18;
                auto tmp20 = std::log1p(tmp2);
                auto tmp21 = static_cast<bool>(false);
                auto tmp22 = static_cast<float>(99.0);
                auto tmp23 = tmp21 ? tmp22 : tmp2;
                auto tmp24 = static_cast<bool>(true);
                auto tmp25 = tmp24 ? tmp22 : tmp2;
                out_ptr0[i0] = tmp10;
                out_ptr1[i0] = tmp13;
                out_ptr2[i0] = tmp17;
                out_ptr3[i0] = tmp19;
                out_ptr4[i0] = tmp20;
                out_ptr5[i0] = tmp23;
                out_ptr6[i0] = tmp25;
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    arg0_1, = args
    args.clear()
    buf0 = empty_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    buf1 = empty_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    buf2 = empty_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    buf3 = empty_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    buf4 = empty_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    buf5 = empty_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    buf6 = empty_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    kernel_cpp_0(c_void_p(arg0_1.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(buf1.data_ptr()), c_void_p(buf2.data_ptr()), c_void_p(buf3.data_ptr()), c_void_p(buf4.data_ptr()), c_void_p(buf5.data_ptr()), c_void_p(buf6.data_ptr()))
    del arg0_1
    return (buf0, buf1, buf2, buf3, buf4, buf5, buf6, )


def benchmark_compiled_module():
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    arg0_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    print_performance(lambda: call([arg0_1]))


if __name__ == "__main__":
    import argparse
    from torch._inductor.utils import benchmark_all_kernels

    parser = argparse.ArgumentParser()
    parser.add_argument("--benchmark-kernels", "-k", action="store_true", help="Whether to benchmark each individual kernels")
    parser.add_argument("--benchmark-all-configs", "-c", action="store_true", help="Whether to benchmark each individual config for a kernel")
    args = parser.parse_args()

    if args.benchmark_kernels:
        benchmark_all_kernels('None', args.benchmark_all_configs)
    else:
        benchmark_compiled_module()

