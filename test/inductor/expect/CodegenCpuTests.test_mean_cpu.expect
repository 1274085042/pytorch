
from ctypes import c_void_p, c_long
import torch
import math
import random
from torch import empty_strided, as_strided, device
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
async_compile = AsyncCompile()


kernel_cpp_0 = async_compile.cpp('''
#include "/tmp/torchinductor_jenkins/ao/caomrguwaptybystzop6sbmdii67jqxwyhyzjizs5gbwosh2mdkg.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    auto out_ptr0 = in_out_ptr1;
    {
        {
            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out += omp_in) initializer(omp_priv={{0}})
            float tmp1 = 0;
            auto tmp1_vec = at::vec::Vectorized<float>(tmp1);
            #pragma omp parallel num_threads(4)
            {
                #pragma omp for reduction(+:tmp1_vec)
                for(long i0=0; i0<8; i0+=1)
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + 8*i0);
                    tmp1_vec += tmp0;
                }
                #pragma omp for simd simdlen(4) reduction(+:tmp1)
                for(long i0=64; i0<64; i0+=1)
                {
                    auto tmp0 = in_ptr0[i0];
                    tmp1 += tmp0;
                }
            }
            tmp1 += at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>&y) {return x + y;}, tmp1_vec);
            out_ptr0[0] = tmp1;
        }
    }
    #pragma omp parallel num_threads(4)
    {
        {
            #pragma omp for
            for(long i0=0; i0<8; i0+=1)
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out += omp_in) initializer(omp_priv={{0}})
                    float tmp1 = 0;
                    auto tmp1_vec = at::vec::Vectorized<float>(tmp1);
                    for(long i1=0; i1<1; i1+=1)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + (8*i0) + (8*i1));
                        tmp1_vec += tmp0;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp1)
                    for(long i1=8; i1<8; i1+=1)
                    {
                        auto tmp0 = in_ptr0[i1 + (8*i0)];
                        tmp1 += tmp0;
                    }
                    tmp1 += at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>&y) {return x + y;}, tmp1_vec);
                    out_ptr1[i0] = tmp1;
                }
            }
        }
        {
            #pragma omp for
            for(long i0=0; i0<1; i0+=1)
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + 8*i0);
                auto tmp1 = at::vec::Vectorized<float>(static_cast<float>(8));
                auto tmp2 = tmp0 / tmp1;
                tmp2.store(in_out_ptr0 + 8*i0);
            }
            #pragma omp for simd simdlen(4)
            for(long i0=8; i0<8; i0+=1)
            {
                auto tmp0 = out_ptr1[i0];
                auto tmp1 = static_cast<float>(8);
                auto tmp2 = tmp0 / tmp1;
                in_out_ptr0[i0] = tmp2;
            }
        }
        {
            #pragma omp for
            for(long i0=0; i0<2; i0+=1)
            {
                for(long i1=0; i1<1; i1+=1)
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + (8*i1) + (32*i0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + 8 + (8*i1) + (32*i0));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr0 + 16 + (8*i1) + (32*i0));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr0 + 24 + (8*i1) + (32*i0));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = at::vec::Vectorized<float>(static_cast<float>(4));
                    auto tmp8 = tmp6 / tmp7;
                    tmp8.store(out_ptr2 + (8*i0) + (8*i1));
                }
                #pragma omp simd simdlen(4)
                for(long i1=8; i1<8; i1+=1)
                {
                    auto tmp0 = in_ptr0[i1 + (32*i0)];
                    auto tmp1 = in_ptr0[8 + i1 + (32*i0)];
                    auto tmp3 = in_ptr0[16 + i1 + (32*i0)];
                    auto tmp5 = in_ptr0[24 + i1 + (32*i0)];
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = static_cast<float>(4);
                    auto tmp8 = tmp6 / tmp7;
                    out_ptr2[i1 + (8*i0)] = tmp8;
                }
            }
        }
        {
            #pragma omp for
            for(long i0=0; i0<4; i0+=1)
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + 8*i0);
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + 32 + (8*i0));
                auto tmp2 = tmp0 + tmp1;
                auto tmp3 = at::vec::Vectorized<float>(static_cast<float>(2));
                auto tmp4 = tmp2 / tmp3;
                tmp4.store(out_ptr3 + 8*i0);
            }
            #pragma omp for simd simdlen(4)
            for(long i0=32; i0<32; i0+=1)
            {
                auto tmp0 = in_ptr0[i0];
                auto tmp1 = in_ptr0[32 + i0];
                auto tmp2 = tmp0 + tmp1;
                auto tmp3 = static_cast<float>(2);
                auto tmp4 = tmp2 / tmp3;
                out_ptr3[i0] = tmp4;
            }
        }
        #pragma omp single
        {
            {
                auto tmp0 = out_ptr0[0];
                auto tmp1 = static_cast<float>(64);
                auto tmp2 = tmp0 / tmp1;
                in_out_ptr1[0] = tmp2;
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    arg0_1, = args
    args.clear()
    buf0 = empty_strided((), (), device='cpu', dtype=torch.float32)
    buf1 = empty_strided((1, 2, 4), (8, 4, 1), device='cpu', dtype=torch.float32)
    buf2 = buf1; del buf1  # reuse
    buf3 = empty_strided((1, 2, 1, 8), (16, 8, 8, 1), device='cpu', dtype=torch.float32)
    buf4 = empty_strided((4, 8), (8, 1), device='cpu', dtype=torch.float32)
    buf5 = buf0; del buf0  # reuse
    kernel_cpp_0(c_void_p(buf2.data_ptr()), c_void_p(buf5.data_ptr()), c_void_p(arg0_1.data_ptr()), c_void_p(buf3.data_ptr()), c_void_p(buf4.data_ptr()))
    del arg0_1
    return (buf5, buf2, buf3, buf4, )


def benchmark_compiled_module():
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    arg0_1 = rand_strided((1, 2, 4, 8), (64, 32, 8, 1), device='cpu', dtype=torch.float32)
    print_performance(lambda: call([arg0_1]))


if __name__ == "__main__":
    import argparse
    from torch._inductor.utils import benchmark_all_kernels

    parser = argparse.ArgumentParser()
    parser.add_argument("--benchmark-kernels", "-k", action="store_true", help="Whether to benchmark each individual kernels")
    parser.add_argument("--benchmark-all-configs", "-c", action="store_true", help="Whether to benchmark each individual config for a kernel")
    args = parser.parse_args()

    if args.benchmark_kernels:
        benchmark_all_kernels('None', args.benchmark_all_configs)
    else:
        benchmark_compiled_module()

