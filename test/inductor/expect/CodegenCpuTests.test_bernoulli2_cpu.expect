
from ctypes import c_void_p, c_long
import torch
import math
import random
from torch import empty_strided, as_strided, device
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
async_compile = AsyncCompile()
seed_cpu_None = None  # 9130db9322feaa41c28986790b86d7dd047e77339ff46fce775dbaa5929b26ce


kernel_cpp_0 = async_compile.cpp('''
#include "/tmp/torchinductor_jenkins/ao/caomrguwaptybystzop6sbmdii67jqxwyhyzjizs5gbwosh2mdkg.h"
extern "C" void kernel(const long* seed0,
                       const float* in_ptr1,
                       bool* out_ptr0)
{
    #pragma omp parallel num_threads(4)
    {
        {
            #pragma omp for 
            for(long i0=0; i0<8; i0+=1)
            {
                auto tmp0 = seed0[0];
                auto tmp5 = in_ptr1[i0];
                auto tmp1 = static_cast<int>(65535);
                auto tmp2 = tmp0 ^ tmp1;
                auto tmp3 = static_cast<int>(i0);
                auto tmp4 = static_cast<float>(normalized_rand_cpu(tmp2, tmp3));;
                auto tmp6 = tmp4 < tmp5;
                out_ptr0[i0] = tmp6;
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    arg0_1, = args
    args.clear()
    torch.randint(2**31, size=(), dtype=torch.int64, out=seed_cpu_None)
    buf0 = empty_strided((8, ), (1, ), device='cpu', dtype=torch.bool)
    kernel_cpp_0(c_void_p(seed_cpu_None.data_ptr()), c_void_p(arg0_1.data_ptr()), c_void_p(buf0.data_ptr()))
    del arg0_1
    return (buf0, )


def benchmark_compiled_module():
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    seed_cpu_None = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg0_1 = rand_strided((8, ), (1, ), device='cpu', dtype=torch.float32)
    print_performance(lambda: call([arg0_1]))


if __name__ == "__main__":
    import argparse
    from torch._inductor.utils import benchmark_all_kernels

    parser = argparse.ArgumentParser()
    parser.add_argument("--benchmark-kernels", "-k", action="store_true", help="Whether to benchmark each individual kernels")
    parser.add_argument("--benchmark-all-configs", "-c", action="store_true", help="Whether to benchmark each individual config for a kernel")
    args = parser.parse_args()

    if args.benchmark_kernels:
        benchmark_all_kernels('None', args.benchmark_all_configs)
    else:
        benchmark_compiled_module()

