
from ctypes import c_void_p, c_long
import torch
import math
import random
from torch import empty_strided, as_strided, device
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
async_compile = AsyncCompile()


kernel_cpp_0 = async_compile.cpp('''
#include "/tmp/torchinductor_jenkins/ao/caomrguwaptybystzop6sbmdii67jqxwyhyzjizs5gbwosh2mdkg.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(4)
    {
        {
            #pragma omp for
            for(long i0=0; i0<32; i0+=1)
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + 8*i0);
                auto tmp1 = at::vec::Vectorized<float>(static_cast<float>(0));
                auto tmp2 = to_float_mask(tmp0 > tmp1);
                auto tmp3 = at::vec::Vectorized<float>(static_cast<float>(1.0507009873554805));
                auto tmp4 = tmp0 * tmp3;
                auto tmp5 = at::vec::Vectorized<float>(static_cast<float>(1.0));
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.exp() - decltype(tmp6)(1);
                auto tmp8 = at::vec::Vectorized<float>(static_cast<float>(1.7580993408473766));
                auto tmp9 = tmp7 * tmp8;
                auto tmp10 = decltype(tmp4)::blendv(tmp9, tmp4, tmp2);
                auto tmp11 = at::vec::Vectorized<float>(static_cast<float>(2));
                auto tmp12 = tmp10 + tmp11;
                auto tmp13 = at::vec::Vectorized<float>(static_cast<float>(1));
                auto tmp14 = tmp0 + tmp13;
                auto tmp15 = to_float_mask(tmp14 > tmp1);
                auto tmp16 = at::vec::Vectorized<float>(static_cast<float>(3));
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = at::vec::Vectorized<float>(static_cast<float>(4));
                auto tmp19 = tmp14 * tmp18;
                auto tmp20 = tmp19.exp() - decltype(tmp19)(1);
                auto tmp21 = at::vec::Vectorized<float>(static_cast<float>(6));
                auto tmp22 = tmp20 * tmp21;
                auto tmp23 = decltype(tmp17)::blendv(tmp22, tmp17, tmp15);
                tmp12.store(out_ptr0 + 8*i0);
                tmp23.store(out_ptr1 + 8*i0);
            }
            #pragma omp for simd simdlen(4)
            for(long i0=256; i0<256; i0+=1)
            {
                auto tmp0 = in_ptr0[i0];
                auto tmp1 = static_cast<float>(0);
                auto tmp2 = tmp0 > tmp1;
                auto tmp3 = static_cast<float>(1.0507009873554805);
                auto tmp4 = tmp0 * tmp3;
                auto tmp5 = static_cast<float>(1.0);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = std::expm1(tmp6);
                auto tmp8 = static_cast<float>(1.7580993408473766);
                auto tmp9 = tmp7 * tmp8;
                auto tmp10 = tmp2 ? tmp4 : tmp9;
                auto tmp11 = static_cast<float>(2);
                auto tmp12 = tmp10 + tmp11;
                auto tmp13 = static_cast<float>(1);
                auto tmp14 = tmp0 + tmp13;
                auto tmp15 = tmp14 > tmp1;
                auto tmp16 = static_cast<float>(3);
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = static_cast<float>(4);
                auto tmp19 = tmp14 * tmp18;
                auto tmp20 = std::expm1(tmp19);
                auto tmp21 = static_cast<float>(6);
                auto tmp22 = tmp20 * tmp21;
                auto tmp23 = tmp15 ? tmp17 : tmp22;
                out_ptr0[i0] = tmp12;
                out_ptr1[i0] = tmp23;
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    arg0_1, = args
    args.clear()
    buf0 = empty_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    buf1 = empty_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    kernel_cpp_0(c_void_p(arg0_1.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(buf1.data_ptr()))
    del arg0_1
    return (buf0, buf1, )


def benchmark_compiled_module():
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    arg0_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    print_performance(lambda: call([arg0_1]))


if __name__ == "__main__":
    import argparse
    from torch._inductor.utils import benchmark_all_kernels

    parser = argparse.ArgumentParser()
    parser.add_argument("--benchmark-kernels", "-k", action="store_true", help="Whether to benchmark each individual kernels")
    parser.add_argument("--benchmark-all-configs", "-c", action="store_true", help="Whether to benchmark each individual config for a kernel")
    args = parser.parse_args()

    if args.benchmark_kernels:
        benchmark_all_kernels('None', args.benchmark_all_configs)
    else:
        benchmark_compiled_module()

