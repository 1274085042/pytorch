
from ctypes import c_void_p, c_long
import torch
import math
import random
from torch import empty_strided, as_strided, device
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
async_compile = AsyncCompile()


kernel_cpp_0 = async_compile.cpp('''
#include "/tmp/torchinductor_jenkins/ao/caomrguwaptybystzop6sbmdii67jqxwyhyzjizs5gbwosh2mdkg.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(4)
    {
        {
            #pragma omp for
            for(long i0=0; i0<8; i0+=1)
            {
                #pragma GCC ivdep
                for(long i1=0; i1<7; i1+=1)
                {
                    #pragma GCC ivdep
                    for(long i2=0; i2<7; i2+=1)
                    {
                        auto tmp0 = in_ptr0[(2*i2) + (32*i1) + (256*i0)];
                        auto tmp1 = in_ptr0[1 + (2*i2) + (32*i1) + (256*i0)];
                        auto tmp3 = in_ptr0[2 + (2*i2) + (32*i1) + (256*i0)];
                        auto tmp5 = in_ptr0[16 + (2*i2) + (32*i1) + (256*i0)];
                        auto tmp7 = in_ptr0[17 + (2*i2) + (32*i1) + (256*i0)];
                        auto tmp9 = in_ptr0[18 + (2*i2) + (32*i1) + (256*i0)];
                        auto tmp11 = in_ptr0[32 + (2*i2) + (32*i1) + (256*i0)];
                        auto tmp13 = in_ptr0[33 + (2*i2) + (32*i1) + (256*i0)];
                        auto tmp15 = in_ptr0[34 + (2*i2) + (32*i1) + (256*i0)];
                        auto tmp2 = tmp1 + tmp0;
                        auto tmp4 = tmp3 + tmp2;
                        auto tmp6 = tmp5 + tmp4;
                        auto tmp8 = tmp7 + tmp6;
                        auto tmp10 = tmp9 + tmp8;
                        auto tmp12 = tmp11 + tmp10;
                        auto tmp14 = tmp13 + tmp12;
                        auto tmp16 = tmp15 + tmp14;
                        auto tmp17 = static_cast<float>(0.1111111111111111);
                        auto tmp18 = tmp16 * tmp17;
                        out_ptr0[i2 + (7*i1) + (49*i0)] = tmp18;
                    }
                }
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    arg0_1, = args
    args.clear()
    buf0 = empty_strided((2, 4, 7, 7), (196, 49, 7, 1), device='cpu', dtype=torch.float32)
    kernel_cpp_0(c_void_p(arg0_1.data_ptr()), c_void_p(buf0.data_ptr()))
    del arg0_1
    return (buf0, )


def benchmark_compiled_module():
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    arg0_1 = rand_strided((2, 4, 16, 16), (1024, 256, 16, 1), device='cpu', dtype=torch.float32)
    print_performance(lambda: call([arg0_1]))


if __name__ == "__main__":
    import argparse
    from torch._inductor.utils import benchmark_all_kernels

    parser = argparse.ArgumentParser()
    parser.add_argument("--benchmark-kernels", "-k", action="store_true", help="Whether to benchmark each individual kernels")
    parser.add_argument("--benchmark-all-configs", "-c", action="store_true", help="Whether to benchmark each individual config for a kernel")
    args = parser.parse_args()

    if args.benchmark_kernels:
        benchmark_all_kernels('None', args.benchmark_all_configs)
    else:
        benchmark_compiled_module()

