
from ctypes import c_void_p, c_long
import torch
import math
import random
from torch import empty_strided, as_strided, device
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
async_compile = AsyncCompile()


kernel_cpp_0 = async_compile.cpp('''
#include "/tmp/torchinductor_jenkins/ao/caomrguwaptybystzop6sbmdii67jqxwyhyzjizs5gbwosh2mdkg.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr1,
                       float* out_ptr3,
                       bool* out_ptr4)
{
    auto out_ptr0 = in_out_ptr0;
    auto out_ptr2 = in_out_ptr1;
    #pragma omp parallel num_threads(4)
    {
        {
            #pragma omp for 
            for(long i0=0; i0<16; i0+=1)
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out += omp_in) initializer(omp_priv={{0}})
                    float tmp1 = 0;
                    auto tmp1_vec = at::vec::Vectorized<float>(tmp1);
                    for(long i1=0; i1<4; i1+=1)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + (8*i1) + (32*i0));
                        tmp1_vec += tmp0;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp1)
                    for(long i1=32; i1<32; i1+=1)
                    {
                        auto tmp0 = in_ptr0[i1 + (32*i0)];
                        tmp1 += tmp0;
                    }
                    tmp1 += at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>&y) {return x + y;}, tmp1_vec);
                    out_ptr0[i0] = tmp1;
                }
            }
        }
        {
            #pragma omp for 
            for(long i0=0; i0<2; i0+=1)
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + 8*i0);
                auto tmp1 = at::vec::Vectorized<float>(static_cast<float>(32));
                auto tmp2 = tmp0 / tmp1;
                tmp2.store(in_out_ptr0 + 8*i0);
                tmp2.store(out_ptr1 + 8*i0);
            }
            #pragma omp for simd simdlen(4) 
            for(long i0=16; i0<16; i0+=1)
            {
                auto tmp0 = out_ptr0[i0];
                auto tmp1 = static_cast<float>(32);
                auto tmp2 = tmp0 / tmp1;
                in_out_ptr0[i0] = tmp2;
                out_ptr1[i0] = tmp2;
            }
        }
        {
            #pragma omp for 
            for(long i0=0; i0<16; i0+=1)
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out += omp_in) initializer(omp_priv={{0}})
                    float tmp4 = 0;
                    auto tmp4_vec = at::vec::Vectorized<float>(tmp4);
                    for(long i1=0; i1<4; i1+=1)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + (8*i1) + (32*i0));
                        auto tmp1 = at::vec::Vectorized<float>(in_out_ptr0[i0]);
                        auto tmp2 = tmp0 - tmp1;
                        auto tmp3 = tmp2 * tmp2;
                        tmp4_vec += tmp3;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp4)
                    for(long i1=32; i1<32; i1+=1)
                    {
                        auto tmp0 = in_ptr0[i1 + (32*i0)];
                        auto tmp1 = in_out_ptr0[i0];
                        auto tmp2 = tmp0 - tmp1;
                        auto tmp3 = tmp2 * tmp2;
                        tmp4 += tmp3;
                    }
                    tmp4 += at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>&y) {return x + y;}, tmp4_vec);
                    out_ptr2[i0] = tmp4;
                }
            }
        }
        {
            #pragma omp for 
            for(long i0=0; i0<2; i0+=1)
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + 8*i0);
                auto tmp1 = at::vec::Vectorized<float>(static_cast<float>(32));
                auto tmp2 = tmp0 / tmp1;
                auto tmp3 = at::vec::Vectorized<float>(static_cast<float>(1e-05));
                auto tmp4 = tmp2 + tmp3;
                auto tmp5 = tmp4.rsqrt();
                tmp5.store(in_out_ptr1 + 8*i0);
            }
            #pragma omp for simd simdlen(4) 
            for(long i0=16; i0<16; i0+=1)
            {
                auto tmp0 = out_ptr2[i0];
                auto tmp1 = static_cast<float>(32);
                auto tmp2 = tmp0 / tmp1;
                auto tmp3 = static_cast<float>(1e-05);
                auto tmp4 = tmp2 + tmp3;
                auto tmp5 = 1 / std::sqrt(tmp4);
                in_out_ptr1[i0] = tmp5;
            }
        }
        {
            #pragma omp for 
            for(long i0=0; i0<16; i0+=1)
            {
                for(long i1=0; i1<4; i1+=1)
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + (8*i1) + (32*i0));
                    auto tmp1 = at::vec::Vectorized<float>(out_ptr1[i0]);
                    auto tmp3 = at::vec::Vectorized<float>(in_out_ptr1[i0]);
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr1 + 8*i1);
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + 8*i1);
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = at::vec::clamp_min(tmp8, decltype(tmp8)(0));
                    tmp9.store(out_ptr3 + (8*i1) + (32*i0));
                }
                #pragma omp simd simdlen(4) 
                for(long i1=32; i1<32; i1+=1)
                {
                    auto tmp0 = in_ptr0[i1 + (32*i0)];
                    auto tmp1 = out_ptr1[i0];
                    auto tmp3 = in_out_ptr1[i0];
                    auto tmp5 = in_ptr1[i1];
                    auto tmp7 = in_ptr2[i1];
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp8 * (tmp8>0);
                    out_ptr3[i1 + (32*i0)] = tmp9;
                }
            }
        }
        {
            #pragma omp for 
            for(long i0=0; i0<512; i0+=1)
            {
                auto tmp0 = out_ptr3[i0];
                auto tmp1 = static_cast<float>(0);
                auto tmp2 = tmp0 <= tmp1;
                out_ptr4[i0] = tmp2;
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    primals_1, primals_2, primals_3 = args
    args.clear()
    buf0 = empty_strided((16, 1), (1, 16), device='cpu', dtype=torch.float32)
    buf1 = buf0; del buf0  # reuse
    buf3 = empty_strided((16, 1), (1, 1), device='cpu', dtype=torch.float32)
    buf2 = empty_strided((16, 1), (1, 16), device='cpu', dtype=torch.float32)
    buf4 = as_strided(buf2, (16, 1), (1, 1)); del buf2  # reuse
    buf5 = empty_strided((16, 32), (32, 1), device='cpu', dtype=torch.float32)
    buf6 = empty_strided((16, 32), (32, 1), device='cpu', dtype=torch.bool)
    kernel_cpp_0(c_void_p(buf1.data_ptr()), c_void_p(buf4.data_ptr()), c_void_p(primals_3.data_ptr()), c_void_p(primals_1.data_ptr()), c_void_p(primals_2.data_ptr()), c_void_p(buf3.data_ptr()), c_void_p(buf5.data_ptr()), c_void_p(buf6.data_ptr()))
    del buf1
    del primals_1
    del primals_2
    return (buf5, primals_3, buf3, buf4, buf6, )


def benchmark_compiled_module():
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    primals_1 = rand_strided((32, ), (1, ), device='cpu', dtype=torch.float32)
    primals_2 = rand_strided((32, ), (1, ), device='cpu', dtype=torch.float32)
    primals_3 = rand_strided((16, 32), (32, 1), device='cpu', dtype=torch.float32)
    print_performance(lambda: call([primals_1, primals_2, primals_3]))


if __name__ == "__main__":
    import argparse
    from torch._inductor.utils import benchmark_all_kernels

    parser = argparse.ArgumentParser()
    parser.add_argument("--benchmark-kernels", "-k", action="store_true", help="Whether to benchmark each individual kernels")
    parser.add_argument("--benchmark-all-configs", "-c", action="store_true", help="Whether to benchmark each individual config for a kernel")
    args = parser.parse_args()

    if args.benchmark_kernels:
        benchmark_all_kernels('None', args.benchmark_all_configs)
    else:
        benchmark_compiled_module()

