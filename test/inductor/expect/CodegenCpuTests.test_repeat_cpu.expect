
from ctypes import c_void_p, c_long
import torch
import math
import random
from torch import empty_strided, as_strided, device
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
async_compile = AsyncCompile()


kernel_cpp_0 = async_compile.cpp('''
#include "/tmp/torchinductor_jenkins/ao/caomrguwaptybystzop6sbmdii67jqxwyhyzjizs5gbwosh2mdkg.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(4)
    {
        {
            #pragma omp for  collapse(2)
            for(long i0=0; i0<2; i0+=1)
            {
                for(long i1=0; i1<4; i1+=1)
                {
                    #pragma GCC ivdep
                    for(long i2=0; i2<12; i2+=1)
                    {
                        for(long i3=0; i3<1; i3+=1)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + (8*i3) + (8*(i2 % 4)) + (32*(i1 % 2)));
                            tmp0.store(out_ptr0 + (8*i2) + (8*i3) + (96*i1) + (384*i0));
                        }
                        #pragma omp simd simdlen(4) 
                        for(long i3=8; i3<8; i3+=1)
                        {
                            auto tmp0 = in_ptr0[i3 + (8*(i2 % 4)) + (32*(i1 % 2))];
                            out_ptr0[i3 + (8*i2) + (96*i1) + (384*i0)] = tmp0;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long i0=0; i0<8; i0+=1)
            {
                for(long i1=0; i1<8; i1+=1)
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + 8*i1);
                    tmp0.store(out_ptr1 + (8*i1) + (64*i0));
                }
                #pragma omp simd simdlen(4) 
                for(long i1=64; i1<64; i1+=1)
                {
                    auto tmp0 = in_ptr0[i1];
                    out_ptr1[i1 + (64*i0)] = tmp0;
                }
            }
        }
        {
            #pragma omp for 
            for(long i0=0; i0<2; i0+=1)
            {
                for(long i1=0; i1<8; i1+=1)
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + 8*i1);
                    tmp0.store(out_ptr2 + (8*i1) + (64*i0));
                }
                #pragma omp simd simdlen(4) 
                for(long i1=64; i1<64; i1+=1)
                {
                    auto tmp0 = in_ptr0[i1];
                    out_ptr2[i1 + (64*i0)] = tmp0;
                }
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    arg0_1, = args
    args.clear()
    buf0 = empty_strided((2, 4, 12, 8), (384, 96, 8, 1), device='cpu', dtype=torch.float32)
    buf1 = empty_strided((8, 2, 4, 8), (64, 32, 8, 1), device='cpu', dtype=torch.float32)
    buf2 = empty_strided((2, 1, 1, 2, 4, 8), (64, 64, 64, 32, 8, 1), device='cpu', dtype=torch.float32)
    kernel_cpp_0(c_void_p(arg0_1.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(buf1.data_ptr()), c_void_p(buf2.data_ptr()))
    del arg0_1
    return (buf0, buf1, buf2, )


def benchmark_compiled_module():
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    arg0_1 = rand_strided((1, 2, 4, 8), (64, 32, 8, 1), device='cpu', dtype=torch.float32)
    print_performance(lambda: call([arg0_1]))


if __name__ == "__main__":
    import argparse
    from torch._inductor.utils import benchmark_all_kernels

    parser = argparse.ArgumentParser()
    parser.add_argument("--benchmark-kernels", "-k", action="store_true", help="Whether to benchmark each individual kernels")
    parser.add_argument("--benchmark-all-configs", "-c", action="store_true", help="Whether to benchmark each individual config for a kernel")
    args = parser.parse_args()

    if args.benchmark_kernels:
        benchmark_all_kernels('None', args.benchmark_all_configs)
    else:
        benchmark_compiled_module()

