
from ctypes import c_void_p, c_long
import torch
import math
import random
from torch import empty_strided, as_strided, device
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
async_compile = AsyncCompile()


kernel_cpp_0 = async_compile.cpp('''
#include "/tmp/torchinductor_jenkins/ao/caomrguwaptybystzop6sbmdii67jqxwyhyzjizs5gbwosh2mdkg.h"
extern "C" void kernel(const long* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(4)
    {
        {
            #pragma omp for 
            for(long i0=0; i0<8; i0+=1)
            {
                #pragma GCC ivdep
                for(long i1=0; i1<40; i1+=1)
                {
                    #pragma GCC ivdep
                    for(long i2=0; i2<56; i2+=1)
                    {
                        auto tmp0 = static_cast<int>(i2 + (56*i1));
                        auto tmp1 = static_cast<int>((i1 / 2));
                        auto tmp2 = static_cast<int>((i2 / 2));
                        auto tmp3 = static_cast<int>(1 + (((1 + i1) / 2)));
                        auto tmp4 = static_cast<int>(1 + (((1 + i2) / 2)));
                        auto tmp5 = static_cast<int>(0);
                        auto tmp6 = (tmp5 != tmp5) ? tmp5 : std::max(tmp1, tmp5);
                        auto tmp7 = (tmp5 != tmp5) ? tmp5 : std::max(tmp2, tmp5);
                        auto tmp8 = static_cast<int>(21);
                        auto tmp9 = (tmp8 != tmp8) ? tmp8 : std::min(tmp3, tmp8);
                        auto tmp10 = static_cast<int>(29);
                        auto tmp11 = (tmp10 != tmp10) ? tmp10 : std::min(tmp4, tmp10);
                        auto tmp12 = tmp6 + tmp5;
                        auto tmp13 = tmp7 + tmp5;
                        auto tmp14 = static_cast<int>(1);
                        auto tmp15 = tmp9 - tmp14;
                        auto tmp16 = (tmp15 != tmp15) ? tmp15 : std::min(tmp12, tmp15);
                        auto tmp17 = tmp11 - tmp14;
                        auto tmp18 = (tmp17 != tmp17) ? tmp17 : std::min(tmp13, tmp17);
                        auto tmp19 = in_ptr0[tmp18 + (29*tmp16) + (609*i0)];
                        auto tmp20 = in_ptr1[tmp18 + (29*tmp16) + (609*i0)];
                        auto tmp21 = tmp19 == tmp0;
                        auto tmp22 = static_cast<float>(0.0);
                        auto tmp23 = tmp21 ? tmp20 : tmp22;
                        auto tmp24 = tmp7 + tmp14;
                        auto tmp25 = (tmp17 != tmp17) ? tmp17 : std::min(tmp24, tmp17);
                        auto tmp26 = in_ptr0[tmp25 + (29*tmp16) + (609*i0)];
                        auto tmp27 = in_ptr1[tmp25 + (29*tmp16) + (609*i0)];
                        auto tmp28 = tmp26 == tmp0;
                        auto tmp29 = tmp12 < tmp9;
                        auto tmp30 = tmp24 < tmp11;
                        auto tmp31 = tmp29 & tmp30;
                        auto tmp32 = tmp31 & tmp28;
                        auto tmp33 = tmp23 + tmp27;
                        auto tmp34 = tmp32 ? tmp33 : tmp23;
                        auto tmp35 = tmp6 + tmp14;
                        auto tmp36 = (tmp15 != tmp15) ? tmp15 : std::min(tmp35, tmp15);
                        auto tmp37 = in_ptr0[tmp18 + (29*tmp36) + (609*i0)];
                        auto tmp38 = in_ptr1[tmp18 + (29*tmp36) + (609*i0)];
                        auto tmp39 = tmp37 == tmp0;
                        auto tmp40 = tmp35 < tmp9;
                        auto tmp41 = tmp13 < tmp11;
                        auto tmp42 = tmp40 & tmp41;
                        auto tmp43 = tmp42 & tmp39;
                        auto tmp44 = tmp34 + tmp38;
                        auto tmp45 = tmp43 ? tmp44 : tmp34;
                        auto tmp46 = in_ptr0[tmp25 + (29*tmp36) + (609*i0)];
                        auto tmp47 = in_ptr1[tmp25 + (29*tmp36) + (609*i0)];
                        auto tmp48 = tmp46 == tmp0;
                        auto tmp49 = tmp40 & tmp30;
                        auto tmp50 = tmp49 & tmp48;
                        auto tmp51 = tmp45 + tmp47;
                        auto tmp52 = tmp50 ? tmp51 : tmp45;
                        out_ptr0[i2 + (56*i1) + (2240*i0)] = tmp52;
                    }
                }
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    arg0_1, arg1_1, arg2_1 = args
    args.clear()
    buf0 = empty_strided((2, 4, 40, 56), (8960, 2240, 56, 1), device='cpu', dtype=torch.float32)
    kernel_cpp_0(c_void_p(arg2_1.data_ptr()), c_void_p(arg0_1.data_ptr()), c_void_p(buf0.data_ptr()))
    del arg0_1
    del arg2_1
    return (buf0, )


def benchmark_compiled_module():
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    arg0_1 = rand_strided((2, 4, 21, 29), (2436, 609, 29, 1), device='cpu', dtype=torch.float32)
    arg1_1 = rand_strided((2, 4, 40, 56), (8960, 2240, 56, 1), device='cpu', dtype=torch.float32)
    arg2_1 = rand_strided((2, 4, 21, 29), (2436, 609, 29, 1), device='cpu', dtype=torch.int64)
    print_performance(lambda: call([arg0_1, arg1_1, arg2_1]))


if __name__ == "__main__":
    import argparse
    from torch._inductor.utils import benchmark_all_kernels

    parser = argparse.ArgumentParser()
    parser.add_argument("--benchmark-kernels", "-k", action="store_true", help="Whether to benchmark each individual kernels")
    parser.add_argument("--benchmark-all-configs", "-c", action="store_true", help="Whether to benchmark each individual config for a kernel")
    args = parser.parse_args()

    if args.benchmark_kernels:
        benchmark_all_kernels('None', args.benchmark_all_configs)
    else:
        benchmark_compiled_module()

