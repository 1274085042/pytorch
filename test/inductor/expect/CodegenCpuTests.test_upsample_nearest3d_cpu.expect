
from ctypes import c_void_p, c_long
import torch
import math
import random
from torch import empty_strided, as_strided, device
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
async_compile = AsyncCompile()


kernel_cpp_0 = async_compile.cpp('''
#include "/tmp/torchinductor_jenkins/ao/caomrguwaptybystzop6sbmdii67jqxwyhyzjizs5gbwosh2mdkg.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(4)
    {
        {
            #pragma omp for
            for(long i0=0; i0<8; i0+=1)
            {
                #pragma GCC ivdep
                for(long i1=0; i1<74; i1+=1)
                {
                    #pragma GCC ivdep
                    for(long i2=0; i2<76; i2+=1)
                    {
                        #pragma GCC ivdep
                        for(long i3=0; i3<78; i3+=1)
                        {
                            auto tmp0 = static_cast<long>(i1);
                            auto tmp1 = static_cast<double>(tmp0);
                            auto tmp2 = static_cast<double>(1);
                            auto tmp3 = tmp1 * tmp2;
                            auto tmp4 = static_cast<double>(0);
                            auto tmp5 = tmp3 + tmp4;
                            auto tmp6 = static_cast<float>(tmp5);
                            auto tmp7 = static_cast<float>(0.5);
                            auto tmp8 = tmp6 * tmp7;
                            auto tmp9 = static_cast<long>(tmp8);
                            auto tmp10 = static_cast<long>(i2);
                            auto tmp11 = static_cast<double>(tmp10);
                            auto tmp12 = tmp11 * tmp2;
                            auto tmp13 = tmp12 + tmp4;
                            auto tmp14 = static_cast<float>(tmp13);
                            auto tmp15 = tmp14 * tmp7;
                            auto tmp16 = static_cast<long>(tmp15);
                            auto tmp17 = static_cast<long>(i3);
                            auto tmp18 = static_cast<double>(tmp17);
                            auto tmp19 = tmp18 * tmp2;
                            auto tmp20 = tmp19 + tmp4;
                            auto tmp21 = static_cast<float>(tmp20);
                            auto tmp22 = tmp21 * tmp7;
                            auto tmp23 = static_cast<long>(tmp22);
                            auto tmp24 = in_ptr0[tmp23 + (39*tmp16) + (1482*tmp9) + (54834*i0)];
                            out_ptr0[i3 + (78*i2) + (5928*i1) + (438672*i0)] = tmp24;
                            out_ptr1[i3 + (78*i2) + (5928*i1) + (438672*i0)] = tmp24;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for
            for(long i0=0; i0<8; i0+=1)
            {
                #pragma GCC ivdep
                for(long i1=0; i1<70; i1+=1)
                {
                    #pragma GCC ivdep
                    for(long i2=0; i2<75; i2+=1)
                    {
                        #pragma GCC ivdep
                        for(long i3=0; i3<80; i3+=1)
                        {
                            auto tmp0 = static_cast<long>(i1);
                            auto tmp1 = static_cast<double>(tmp0);
                            auto tmp2 = static_cast<double>(1);
                            auto tmp3 = tmp1 * tmp2;
                            auto tmp4 = static_cast<double>(0);
                            auto tmp5 = tmp3 + tmp4;
                            auto tmp6 = static_cast<float>(tmp5);
                            auto tmp7 = static_cast<float>(0.5285714285714286);
                            auto tmp8 = tmp6 * tmp7;
                            auto tmp9 = static_cast<long>(tmp8);
                            auto tmp10 = static_cast<long>(i2);
                            auto tmp11 = static_cast<double>(tmp10);
                            auto tmp12 = tmp11 * tmp2;
                            auto tmp13 = tmp12 + tmp4;
                            auto tmp14 = static_cast<float>(tmp13);
                            auto tmp15 = static_cast<float>(0.5066666666666667);
                            auto tmp16 = tmp14 * tmp15;
                            auto tmp17 = static_cast<long>(tmp16);
                            auto tmp18 = static_cast<long>(i3);
                            auto tmp19 = static_cast<double>(tmp18);
                            auto tmp20 = tmp19 * tmp2;
                            auto tmp21 = tmp20 + tmp4;
                            auto tmp22 = static_cast<float>(tmp21);
                            auto tmp23 = static_cast<float>(0.4875);
                            auto tmp24 = tmp22 * tmp23;
                            auto tmp25 = static_cast<long>(tmp24);
                            auto tmp26 = in_ptr0[tmp25 + (39*tmp17) + (1482*tmp9) + (54834*i0)];
                            out_ptr2[i3 + (80*i2) + (6000*i1) + (420000*i0)] = tmp26;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for
            for(long i0=0; i0<8; i0+=1)
            {
                #pragma GCC ivdep
                for(long i1=0; i1<45; i1+=1)
                {
                    #pragma GCC ivdep
                    for(long i2=0; i2<74; i2+=1)
                    {
                        #pragma GCC ivdep
                        for(long i3=0; i3<103; i3+=1)
                        {
                            auto tmp0 = static_cast<long>(i1);
                            auto tmp1 = static_cast<double>(tmp0);
                            auto tmp2 = static_cast<double>(1);
                            auto tmp3 = tmp1 * tmp2;
                            auto tmp4 = static_cast<double>(0);
                            auto tmp5 = tmp3 + tmp4;
                            auto tmp6 = static_cast<float>(tmp5);
                            auto tmp7 = static_cast<float>(0.8222222222222222);
                            auto tmp8 = tmp6 * tmp7;
                            auto tmp9 = static_cast<long>(tmp8);
                            auto tmp10 = static_cast<long>(i2);
                            auto tmp11 = static_cast<double>(tmp10);
                            auto tmp12 = tmp11 * tmp2;
                            auto tmp13 = tmp12 + tmp4;
                            auto tmp14 = static_cast<float>(tmp13);
                            auto tmp15 = static_cast<float>(0.5135135135135135);
                            auto tmp16 = tmp14 * tmp15;
                            auto tmp17 = static_cast<long>(tmp16);
                            auto tmp18 = static_cast<long>(i3);
                            auto tmp19 = static_cast<double>(tmp18);
                            auto tmp20 = tmp19 * tmp2;
                            auto tmp21 = tmp20 + tmp4;
                            auto tmp22 = static_cast<float>(tmp21);
                            auto tmp23 = static_cast<float>(0.3786407766990291);
                            auto tmp24 = tmp22 * tmp23;
                            auto tmp25 = static_cast<long>(tmp24);
                            auto tmp26 = in_ptr0[tmp25 + (39*tmp17) + (1482*tmp9) + (54834*i0)];
                            out_ptr3[i3 + (103*i2) + (7622*i1) + (342990*i0)] = tmp26;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for
            for(long i0=0; i0<8; i0+=1)
            {
                #pragma GCC ivdep
                for(long i1=0; i1<36; i1+=1)
                {
                    #pragma GCC ivdep
                    for(long i2=0; i2<39; i2+=1)
                    {
                        #pragma GCC ivdep
                        for(long i3=0; i3<40; i3+=1)
                        {
                            auto tmp0 = static_cast<long>(i1);
                            auto tmp1 = static_cast<double>(tmp0);
                            auto tmp2 = static_cast<double>(1);
                            auto tmp3 = tmp1 * tmp2;
                            auto tmp4 = static_cast<double>(0);
                            auto tmp5 = tmp3 + tmp4;
                            auto tmp6 = static_cast<float>(tmp5);
                            auto tmp7 = static_cast<float>(1.0277777777777777);
                            auto tmp8 = tmp6 * tmp7;
                            auto tmp9 = static_cast<long>(tmp8);
                            auto tmp10 = static_cast<long>(i2);
                            auto tmp11 = static_cast<double>(tmp10);
                            auto tmp12 = tmp11 * tmp2;
                            auto tmp13 = tmp12 + tmp4;
                            auto tmp14 = static_cast<float>(tmp13);
                            auto tmp15 = static_cast<float>(0.9743589743589743);
                            auto tmp16 = tmp14 * tmp15;
                            auto tmp17 = static_cast<long>(tmp16);
                            auto tmp18 = static_cast<long>(i3);
                            auto tmp19 = static_cast<double>(tmp18);
                            auto tmp20 = tmp19 * tmp2;
                            auto tmp21 = tmp20 + tmp4;
                            auto tmp22 = static_cast<float>(tmp21);
                            auto tmp23 = static_cast<float>(0.975);
                            auto tmp24 = tmp22 * tmp23;
                            auto tmp25 = static_cast<long>(tmp24);
                            auto tmp26 = in_ptr0[tmp25 + (39*tmp17) + (1482*tmp9) + (54834*i0)];
                            out_ptr4[i3 + (40*i2) + (1560*i1) + (56160*i0)] = tmp26;
                        }
                    }
                }
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    arg0_1, = args
    args.clear()
    buf0 = empty_strided((2, 4, 74, 76, 78), (1754688, 438672, 5928, 78, 1), device='cpu', dtype=torch.float32)
    buf4 = empty_strided((2, 4, 74, 76, 78), (1754688, 438672, 5928, 78, 1), device='cpu', dtype=torch.float32)
    buf1 = empty_strided((2, 4, 70, 75, 80), (1680000, 420000, 6000, 80, 1), device='cpu', dtype=torch.float32)
    buf2 = empty_strided((2, 4, 45, 74, 103), (1371960, 342990, 7622, 103, 1), device='cpu', dtype=torch.float32)
    buf3 = empty_strided((2, 4, 36, 39, 40), (224640, 56160, 1560, 40, 1), device='cpu', dtype=torch.float32)
    kernel_cpp_0(c_void_p(arg0_1.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(buf4.data_ptr()), c_void_p(buf1.data_ptr()), c_void_p(buf2.data_ptr()), c_void_p(buf3.data_ptr()))
    del arg0_1
    return (buf0, buf1, buf2, buf3, buf4, )


def benchmark_compiled_module():
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    arg0_1 = rand_strided((2, 4, 37, 38, 39), (219336, 54834, 1482, 39, 1), device='cpu', dtype=torch.float32)
    print_performance(lambda: call([arg0_1]))


if __name__ == "__main__":
    import argparse
    from torch._inductor.utils import benchmark_all_kernels

    parser = argparse.ArgumentParser()
    parser.add_argument("--benchmark-kernels", "-k", action="store_true", help="Whether to benchmark each individual kernels")
    parser.add_argument("--benchmark-all-configs", "-c", action="store_true", help="Whether to benchmark each individual config for a kernel")
    args = parser.parse_args()

    if args.benchmark_kernels:
        benchmark_all_kernels('None', args.benchmark_all_configs)
    else:
        benchmark_compiled_module()

