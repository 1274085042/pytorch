
from ctypes import c_void_p, c_long
import torch
import math
import random
from torch import empty_strided, as_strided, device
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
async_compile = AsyncCompile()


kernel_cpp_0 = async_compile.cpp('''
#include "/tmp/torchinductor_jenkins/ao/caomrguwaptybystzop6sbmdii67jqxwyhyzjizs5gbwosh2mdkg.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15)
{
    #pragma omp parallel num_threads(4)
    {
        {
            #pragma omp for 
            for(long i0=0; i0<32; i0+=1)
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + 8*i0);
                auto tmp1 = tmp0.reciprocal();
                auto tmp2 = tmp1 * tmp1;
                auto tmp3 = tmp2 * tmp2;
                auto tmp4 = tmp3 * tmp3;
                auto tmp5 = tmp2 * tmp1;
                auto tmp6 = tmp5 * tmp5;
                auto tmp7 = tmp6 * tmp1;
                auto tmp8 = tmp3 * tmp1;
                auto tmp9 = at::vec::Vectorized<float>(static_cast<float>(1));
                auto tmp10 = tmp0 * tmp0;
                auto tmp11 = tmp10 * tmp0;
                auto tmp12 = tmp10 * tmp10;
                auto tmp13 = tmp12 * tmp0;
                auto tmp14 = tmp11 * tmp11;
                auto tmp15 = tmp14 * tmp0;
                auto tmp16 = tmp12 * tmp12;
                tmp4.store(out_ptr0 + 8*i0);
                tmp7.store(out_ptr1 + 8*i0);
                tmp6.store(out_ptr2 + 8*i0);
                tmp8.store(out_ptr3 + 8*i0);
                tmp3.store(out_ptr4 + 8*i0);
                tmp5.store(out_ptr5 + 8*i0);
                tmp2.store(out_ptr6 + 8*i0);
                tmp1.store(out_ptr7 + 8*i0);
                tmp9.store(out_ptr8 + 8*i0);
                tmp10.store(out_ptr9 + 8*i0);
                tmp11.store(out_ptr10 + 8*i0);
                tmp12.store(out_ptr11 + 8*i0);
                tmp13.store(out_ptr12 + 8*i0);
                tmp14.store(out_ptr13 + 8*i0);
                tmp15.store(out_ptr14 + 8*i0);
                tmp16.store(out_ptr15 + 8*i0);
            }
            #pragma omp for simd simdlen(4) 
            for(long i0=256; i0<256; i0+=1)
            {
                auto tmp0 = in_ptr0[i0];
                auto tmp1 = 1 / tmp0;
                auto tmp2 = tmp1 * tmp1;
                auto tmp3 = tmp2 * tmp2;
                auto tmp4 = tmp3 * tmp3;
                auto tmp5 = tmp2 * tmp1;
                auto tmp6 = tmp5 * tmp5;
                auto tmp7 = tmp6 * tmp1;
                auto tmp8 = tmp3 * tmp1;
                auto tmp9 = static_cast<float>(1);
                auto tmp10 = tmp0 * tmp0;
                auto tmp11 = tmp10 * tmp0;
                auto tmp12 = tmp10 * tmp10;
                auto tmp13 = tmp12 * tmp0;
                auto tmp14 = tmp11 * tmp11;
                auto tmp15 = tmp14 * tmp0;
                auto tmp16 = tmp12 * tmp12;
                out_ptr0[i0] = tmp4;
                out_ptr1[i0] = tmp7;
                out_ptr2[i0] = tmp6;
                out_ptr3[i0] = tmp8;
                out_ptr4[i0] = tmp3;
                out_ptr5[i0] = tmp5;
                out_ptr6[i0] = tmp2;
                out_ptr7[i0] = tmp1;
                out_ptr8[i0] = tmp9;
                out_ptr9[i0] = tmp10;
                out_ptr10[i0] = tmp11;
                out_ptr11[i0] = tmp12;
                out_ptr12[i0] = tmp13;
                out_ptr13[i0] = tmp14;
                out_ptr14[i0] = tmp15;
                out_ptr15[i0] = tmp16;
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    arg0_1, = args
    args.clear()
    buf0 = empty_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    buf1 = empty_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    buf2 = empty_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    buf3 = empty_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    buf4 = empty_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    buf5 = empty_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    buf6 = empty_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    buf7 = empty_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    buf8 = empty_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    buf9 = empty_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    buf10 = empty_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    buf11 = empty_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    buf12 = empty_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    buf13 = empty_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    buf14 = empty_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    buf15 = empty_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    kernel_cpp_0(c_void_p(arg0_1.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(buf1.data_ptr()), c_void_p(buf2.data_ptr()), c_void_p(buf3.data_ptr()), c_void_p(buf4.data_ptr()), c_void_p(buf5.data_ptr()), c_void_p(buf6.data_ptr()), c_void_p(buf7.data_ptr()), c_void_p(buf8.data_ptr()), c_void_p(buf9.data_ptr()), c_void_p(buf10.data_ptr()), c_void_p(buf11.data_ptr()), c_void_p(buf12.data_ptr()), c_void_p(buf13.data_ptr()), c_void_p(buf14.data_ptr()), c_void_p(buf15.data_ptr()))
    return (buf0, buf1, buf2, buf3, buf4, buf5, buf6, buf7, buf8, arg0_1, buf9, buf10, buf11, buf12, buf13, buf14, buf15, )


def benchmark_compiled_module():
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    arg0_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    print_performance(lambda: call([arg0_1]))


if __name__ == "__main__":
    import argparse
    from torch._inductor.utils import benchmark_all_kernels

    parser = argparse.ArgumentParser()
    parser.add_argument("--benchmark-kernels", "-k", action="store_true", help="Whether to benchmark each individual kernels")
    parser.add_argument("--benchmark-all-configs", "-c", action="store_true", help="Whether to benchmark each individual config for a kernel")
    args = parser.parse_args()

    if args.benchmark_kernels:
        benchmark_all_kernels('None', args.benchmark_all_configs)
    else:
        benchmark_compiled_module()

