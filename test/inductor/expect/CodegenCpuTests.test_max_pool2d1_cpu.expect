
from ctypes import c_void_p, c_long
import torch
import math
import random
from torch import empty_strided, as_strided, device
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
async_compile = AsyncCompile()


kernel_cpp_0 = async_compile.cpp('''
#include "/tmp/torchinductor_jenkins/ao/caomrguwaptybystzop6sbmdii67jqxwyhyzjizs5gbwosh2mdkg.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       long* out_ptr1)
{
    #pragma omp parallel num_threads(4)
    {
        {
            #pragma omp for
            for(long i0=0; i0<8; i0+=1)
            {
                #pragma GCC ivdep
                for(long i1=0; i1<7; i1+=1)
                {
                    #pragma GCC ivdep
                    for(long i2=0; i2<7; i2+=1)
                    {
                        auto tmp0 = in_ptr0[(2*i2) + (32*i1) + (256*i0)];
                        auto tmp1 = in_ptr0[1 + (2*i2) + (32*i1) + (256*i0)];
                        auto tmp3 = in_ptr0[2 + (2*i2) + (32*i1) + (256*i0)];
                        auto tmp5 = in_ptr0[16 + (2*i2) + (32*i1) + (256*i0)];
                        auto tmp7 = in_ptr0[17 + (2*i2) + (32*i1) + (256*i0)];
                        auto tmp9 = in_ptr0[18 + (2*i2) + (32*i1) + (256*i0)];
                        auto tmp11 = in_ptr0[32 + (2*i2) + (32*i1) + (256*i0)];
                        auto tmp13 = in_ptr0[33 + (2*i2) + (32*i1) + (256*i0)];
                        auto tmp15 = in_ptr0[34 + (2*i2) + (32*i1) + (256*i0)];
                        auto tmp2 = (tmp0 != tmp0) ? tmp0 : std::max(tmp1, tmp0);
                        auto tmp4 = (tmp2 != tmp2) ? tmp2 : std::max(tmp3, tmp2);
                        auto tmp6 = (tmp4 != tmp4) ? tmp4 : std::max(tmp5, tmp4);
                        auto tmp8 = (tmp6 != tmp6) ? tmp6 : std::max(tmp7, tmp6);
                        auto tmp10 = (tmp8 != tmp8) ? tmp8 : std::max(tmp9, tmp8);
                        auto tmp12 = (tmp10 != tmp10) ? tmp10 : std::max(tmp11, tmp10);
                        auto tmp14 = (tmp12 != tmp12) ? tmp12 : std::max(tmp13, tmp12);
                        auto tmp16 = (tmp14 != tmp14) ? tmp14 : std::max(tmp15, tmp14);
                        auto tmp17 = static_cast<long>((2*i2) + (32*i1));
                        auto tmp18 = static_cast<long>(1 + (2*i2) + (32*i1));
                        auto tmp19 = tmp1 > tmp0;
                        auto tmp20 = tmp19 ? tmp18 : tmp17;
                        auto tmp21 = static_cast<long>(2 + (2*i2) + (32*i1));
                        auto tmp22 = tmp3 > tmp2;
                        auto tmp23 = tmp22 ? tmp21 : tmp20;
                        auto tmp24 = static_cast<long>(16 + (2*i2) + (32*i1));
                        auto tmp25 = tmp5 > tmp4;
                        auto tmp26 = tmp25 ? tmp24 : tmp23;
                        auto tmp27 = static_cast<long>(17 + (2*i2) + (32*i1));
                        auto tmp28 = tmp7 > tmp6;
                        auto tmp29 = tmp28 ? tmp27 : tmp26;
                        auto tmp30 = static_cast<long>(18 + (2*i2) + (32*i1));
                        auto tmp31 = tmp9 > tmp8;
                        auto tmp32 = tmp31 ? tmp30 : tmp29;
                        auto tmp33 = static_cast<long>(32 + (2*i2) + (32*i1));
                        auto tmp34 = tmp11 > tmp10;
                        auto tmp35 = tmp34 ? tmp33 : tmp32;
                        auto tmp36 = static_cast<long>(33 + (2*i2) + (32*i1));
                        auto tmp37 = tmp13 > tmp12;
                        auto tmp38 = tmp37 ? tmp36 : tmp35;
                        auto tmp39 = static_cast<long>(34 + (2*i2) + (32*i1));
                        auto tmp40 = tmp15 > tmp14;
                        auto tmp41 = tmp40 ? tmp39 : tmp38;
                        out_ptr0[i2 + (7*i1) + (49*i0)] = tmp16;
                        out_ptr1[i2 + (7*i1) + (49*i0)] = tmp41;
                    }
                }
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    arg0_1, = args
    args.clear()
    buf0 = empty_strided((2, 4, 7, 7), (196, 49, 7, 1), device='cpu', dtype=torch.float32)
    buf1 = empty_strided((2, 4, 7, 7), (196, 49, 7, 1), device='cpu', dtype=torch.int64)
    kernel_cpp_0(c_void_p(arg0_1.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(buf1.data_ptr()))
    del arg0_1
    return (buf0, buf1, )


def benchmark_compiled_module():
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    arg0_1 = rand_strided((2, 4, 16, 16), (1024, 256, 16, 1), device='cpu', dtype=torch.float32)
    print_performance(lambda: call([arg0_1]))


if __name__ == "__main__":
    import argparse
    from torch._inductor.utils import benchmark_all_kernels

    parser = argparse.ArgumentParser()
    parser.add_argument("--benchmark-kernels", "-k", action="store_true", help="Whether to benchmark each individual kernels")
    parser.add_argument("--benchmark-all-configs", "-c", action="store_true", help="Whether to benchmark each individual config for a kernel")
    args = parser.parse_args()

    if args.benchmark_kernels:
        benchmark_all_kernels('None', args.benchmark_all_configs)
    else:
        benchmark_compiled_module()

