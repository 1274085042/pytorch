
from ctypes import c_void_p, c_long
import torch
import math
import random
from torch import empty_strided, as_strided, device
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
async_compile = AsyncCompile()


kernel_cpp_0 = async_compile.cpp('''
#include "/tmp/torchinductor_jenkins/ao/caomrguwaptybystzop6sbmdii67jqxwyhyzjizs5gbwosh2mdkg.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       float* in_out_ptr2,
                       float* in_out_ptr3,
                       const float* in_ptr0)
{
    auto out_ptr0 = in_out_ptr0;
    auto out_ptr1 = in_out_ptr1;
    auto out_ptr2 = in_out_ptr2;
    auto out_ptr3 = in_out_ptr3;
    #pragma omp parallel num_threads(4)
    {
        {
            #pragma omp for 
            for(long i0=0; i0<8; i0+=1)
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out += omp_in) initializer(omp_priv={{0}})
                    float tmp1 = 0;
                    auto tmp1_vec = at::vec::Vectorized<float>(tmp1);
                    for(long i1=0; i1<1; i1+=1)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + (8*i0) + (8*i1));
                        tmp1_vec += tmp0;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp1)
                    for(long i1=8; i1<8; i1+=1)
                    {
                        auto tmp0 = in_ptr0[i1 + (8*i0)];
                        tmp1 += tmp0;
                    }
                    tmp1 += at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>&y) {return x + y;}, tmp1_vec);
                    out_ptr0[i0] = tmp1;
                }
            }
        }
        {
            #pragma omp for 
            for(long i0=0; i0<1; i0+=1)
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + 8*i0);
                auto tmp1 = at::vec::Vectorized<float>(static_cast<float>(8));
                auto tmp2 = tmp0 / tmp1;
                tmp2.store(in_out_ptr0 + 8*i0);
            }
            #pragma omp for simd simdlen(4) 
            for(long i0=8; i0<8; i0+=1)
            {
                auto tmp0 = out_ptr0[i0];
                auto tmp1 = static_cast<float>(8);
                auto tmp2 = tmp0 / tmp1;
                in_out_ptr0[i0] = tmp2;
            }
        }
        {
            #pragma omp for 
            for(long i0=0; i0<8; i0+=1)
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out += omp_in) initializer(omp_priv={{0}})
                    float tmp4 = 0;
                    auto tmp4_vec = at::vec::Vectorized<float>(tmp4);
                    for(long i1=0; i1<1; i1+=1)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + (8*i0) + (8*i1));
                        auto tmp1 = at::vec::Vectorized<float>(in_out_ptr0[i0]);
                        auto tmp2 = tmp0 - tmp1;
                        auto tmp3 = tmp2 * tmp2;
                        tmp4_vec += tmp3;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp4)
                    for(long i1=8; i1<8; i1+=1)
                    {
                        auto tmp0 = in_ptr0[i1 + (8*i0)];
                        auto tmp1 = in_out_ptr0[i0];
                        auto tmp2 = tmp0 - tmp1;
                        auto tmp3 = tmp2 * tmp2;
                        tmp4 += tmp3;
                    }
                    tmp4 += at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>&y) {return x + y;}, tmp4_vec);
                    out_ptr1[i0] = tmp4;
                }
            }
        }
        {
            #pragma omp for 
            for(long i0=0; i0<1; i0+=1)
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + 8*i0);
                auto tmp1 = at::vec::Vectorized<float>(static_cast<float>(7));
                auto tmp2 = tmp0 / tmp1;
                tmp2.store(in_out_ptr1 + 8*i0);
            }
            #pragma omp for simd simdlen(4) 
            for(long i0=8; i0<8; i0+=1)
            {
                auto tmp0 = out_ptr1[i0];
                auto tmp1 = static_cast<float>(7);
                auto tmp2 = tmp0 / tmp1;
                in_out_ptr1[i0] = tmp2;
            }
        }
        {
            #pragma omp for 
            for(long i0=0; i0<4; i0+=1)
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out += omp_in) initializer(omp_priv={{0}})
                    float tmp1 = 0;
                    auto tmp1_vec = at::vec::Vectorized<float>(tmp1);
                    for(long i1=0; i1<2; i1+=1)
                    {
                        for(long i2=0; i2<1; i2+=1)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + (8*i0) + (8*i2) + (32*i1));
                            tmp1_vec += tmp0;
                        }
                        #pragma omp simd simdlen(4)  reduction(+:tmp1)
                        for(long i2=8; i2<8; i2+=1)
                        {
                            auto tmp0 = in_ptr0[i2 + (8*i0) + (32*i1)];
                            tmp1 += tmp0;
                        }
                    }
                    tmp1 += at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>&y) {return x + y;}, tmp1_vec);
                    out_ptr2[i0] = tmp1;
                }
            }
        }
        {
            #pragma omp for 
            for(long i0=0; i0<0; i0+=1)
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + 8*i0);
                auto tmp1 = at::vec::Vectorized<float>(static_cast<float>(16));
                auto tmp2 = tmp0 / tmp1;
                tmp2.store(in_out_ptr2 + 8*i0);
            }
            #pragma omp for simd simdlen(4) 
            for(long i0=0; i0<4; i0+=1)
            {
                auto tmp0 = out_ptr2[i0];
                auto tmp1 = static_cast<float>(16);
                auto tmp2 = tmp0 / tmp1;
                in_out_ptr2[i0] = tmp2;
            }
        }
        {
            #pragma omp for 
            for(long i0=0; i0<4; i0+=1)
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out += omp_in) initializer(omp_priv={{0}})
                    float tmp4 = 0;
                    auto tmp4_vec = at::vec::Vectorized<float>(tmp4);
                    for(long i1=0; i1<2; i1+=1)
                    {
                        for(long i2=0; i2<1; i2+=1)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + (8*i0) + (8*i2) + (32*i1));
                            auto tmp1 = at::vec::Vectorized<float>(in_out_ptr2[i0]);
                            auto tmp2 = tmp0 - tmp1;
                            auto tmp3 = tmp2 * tmp2;
                            tmp4_vec += tmp3;
                        }
                        #pragma omp simd simdlen(4)  reduction(+:tmp4)
                        for(long i2=8; i2<8; i2+=1)
                        {
                            auto tmp0 = in_ptr0[i2 + (8*i0) + (32*i1)];
                            auto tmp1 = in_out_ptr2[i0];
                            auto tmp2 = tmp0 - tmp1;
                            auto tmp3 = tmp2 * tmp2;
                            tmp4 += tmp3;
                        }
                    }
                    tmp4 += at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>&y) {return x + y;}, tmp4_vec);
                    out_ptr3[i0] = tmp4;
                }
            }
        }
        {
            #pragma omp for 
            for(long i0=0; i0<0; i0+=1)
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr3 + 8*i0);
                auto tmp1 = at::vec::Vectorized<float>(static_cast<float>(15));
                auto tmp2 = tmp0 / tmp1;
                tmp2.store(in_out_ptr3 + 8*i0);
            }
            #pragma omp for simd simdlen(4) 
            for(long i0=0; i0<4; i0+=1)
            {
                auto tmp0 = out_ptr3[i0];
                auto tmp1 = static_cast<float>(15);
                auto tmp2 = tmp0 / tmp1;
                in_out_ptr3[i0] = tmp2;
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    arg0_1, = args
    args.clear()
    buf0 = empty_strided((1, 2, 4, 1), (8, 4, 1, 8), device='cpu', dtype=torch.float32)
    buf1 = buf0; del buf0  # reuse
    buf2 = empty_strided((1, 2, 4), (8, 4, 1), device='cpu', dtype=torch.float32)
    buf3 = buf2; del buf2  # reuse
    buf4 = empty_strided((1, 1, 4, 1), (4, 4, 1, 4), device='cpu', dtype=torch.float32)
    buf5 = buf4; del buf4  # reuse
    buf6 = empty_strided((1, 4), (4, 1), device='cpu', dtype=torch.float32)
    buf7 = buf6; del buf6  # reuse
    kernel_cpp_0(c_void_p(buf1.data_ptr()), c_void_p(buf3.data_ptr()), c_void_p(buf5.data_ptr()), c_void_p(buf7.data_ptr()), c_void_p(arg0_1.data_ptr()))
    del arg0_1
    return (buf3, as_strided(buf1, (1, 2, 4), (8, 4, 1)), buf7, as_strided(buf5, (1, 4), (4, 1)), )


def benchmark_compiled_module():
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    arg0_1 = rand_strided((1, 2, 4, 8), (64, 32, 8, 1), device='cpu', dtype=torch.float32)
    print_performance(lambda: call([arg0_1]))


if __name__ == "__main__":
    import argparse
    from torch._inductor.utils import benchmark_all_kernels

    parser = argparse.ArgumentParser()
    parser.add_argument("--benchmark-kernels", "-k", action="store_true", help="Whether to benchmark each individual kernels")
    parser.add_argument("--benchmark-all-configs", "-c", action="store_true", help="Whether to benchmark each individual config for a kernel")
    args = parser.parse_args()

    if args.benchmark_kernels:
        benchmark_all_kernels('None', args.benchmark_all_configs)
    else:
        benchmark_compiled_module()

