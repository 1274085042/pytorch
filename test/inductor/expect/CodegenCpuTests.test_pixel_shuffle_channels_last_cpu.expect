
from ctypes import c_void_p, c_long
import torch
import math
import random
from torch import empty_strided, as_strided, device
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
async_compile = AsyncCompile()


kernel_cpp_0 = async_compile.cpp('''
#include "/tmp/torchinductor_jenkins/ao/caomrguwaptybystzop6sbmdii67jqxwyhyzjizs5gbwosh2mdkg.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(4)
    {
        {
            #pragma omp for
            for(long i0=0; i0<9216; i0+=1)
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + 8*i0);
                auto tmp1 = at::vec::clamp_min(tmp0, decltype(tmp0)(0));
                tmp1.store(in_out_ptr0 + 8*i0);
            }
            #pragma omp for simd simdlen(4)
            for(long i0=73728; i0<73728; i0+=1)
            {
                auto tmp0 = in_out_ptr0[i0];
                auto tmp1 = tmp0 * (tmp0>0);
                in_out_ptr0[i0] = tmp1;
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    arg0_1, = args
    args.clear()
    buf0 = aten.pixel_shuffle(arg0_1, 2)
    del arg0_1
    buf1 = buf0
    assert_size_stride(buf1, (1, 4, 128, 144), (73728, 1, 576, 4))
    del buf0
    buf2 = buf1; del buf1  # reuse
    kernel_cpp_0(c_void_p(buf2.data_ptr()))
    return (buf2, )


def benchmark_compiled_module():
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    arg0_1 = rand_strided((1, 16, 64, 72), (73728, 1, 1152, 16), device='cpu', dtype=torch.float32)
    print_performance(lambda: call([arg0_1]))


if __name__ == "__main__":
    import argparse
    from torch._inductor.utils import benchmark_all_kernels

    parser = argparse.ArgumentParser()
    parser.add_argument("--benchmark-kernels", "-k", action="store_true", help="Whether to benchmark each individual kernels")
    parser.add_argument("--benchmark-all-configs", "-c", action="store_true", help="Whether to benchmark each individual config for a kernel")
    args = parser.parse_args()

    if args.benchmark_kernels:
        benchmark_all_kernels('None', args.benchmark_all_configs)
    else:
        benchmark_compiled_module()

