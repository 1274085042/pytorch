
from ctypes import c_void_p, c_long
import torch
import math
import random
from torch import empty_strided, as_strided, device
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
async_compile = AsyncCompile()


kernel_cpp_0 = async_compile.cpp('''
#include "/tmp/torchinductor_jenkins/ao/caomrguwaptybystzop6sbmdii67jqxwyhyzjizs5gbwosh2mdkg.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(4)
    {
        {
            #pragma omp for  collapse(2)
            for(long i0=0; i0<6; i0+=1)
            {
                for(long i1=0; i1<128; i1+=1)
                {
                    for(long i2=0; i2<12; i2+=1)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + (8*i2) + (100*i0));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + (8*i2) + (100*i1) + (12800*i0));
                        auto tmp2 = tmp0 + tmp1;
                        tmp2.store(in_out_ptr0 + (8*i2) + (100*i1) + (12800*i0));
                    }
                    #pragma omp simd simdlen(4) 
                    for(long i2=96; i2<100; i2+=1)
                    {
                        auto tmp0 = in_ptr0[i2 + (100*i0)];
                        auto tmp1 = in_out_ptr0[i2 + (100*i1) + (12800*i0)];
                        auto tmp2 = tmp0 + tmp1;
                        in_out_ptr0[i2 + (100*i1) + (12800*i0)] = tmp2;
                    }
                }
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    arg0_1, arg1_1, arg2_1 = args
    args.clear()
    buf0 = empty_strided((6, 128, 100), (12800, 100, 1), device='cpu', dtype=torch.float32)
    extern_kernels.bmm(arg1_1, arg2_1, out=buf0)
    del arg1_1
    del arg2_1
    buf1 = buf0; del buf0  # reuse
    kernel_cpp_0(c_void_p(buf1.data_ptr()), c_void_p(arg0_1.data_ptr()))
    del arg0_1
    return (buf1, )


def benchmark_compiled_module():
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    arg0_1 = rand_strided((6, 1, 100), (100, 100, 1), device='cpu', dtype=torch.float32)
    arg1_1 = rand_strided((6, 128, 64), (8192, 64, 1), device='cpu', dtype=torch.float32)
    arg2_1 = rand_strided((6, 64, 100), (6400, 100, 1), device='cpu', dtype=torch.float32)
    print_performance(lambda: call([arg0_1, arg1_1, arg2_1]))


if __name__ == "__main__":
    import argparse
    from torch._inductor.utils import benchmark_all_kernels

    parser = argparse.ArgumentParser()
    parser.add_argument("--benchmark-kernels", "-k", action="store_true", help="Whether to benchmark each individual kernels")
    parser.add_argument("--benchmark-all-configs", "-c", action="store_true", help="Whether to benchmark each individual config for a kernel")
    args = parser.parse_args()

    if args.benchmark_kernels:
        benchmark_all_kernels('None', args.benchmark_all_configs)
    else:
        benchmark_compiled_module()

