
from ctypes import c_void_p, c_long
import torch
import math
import random
from torch import empty_strided, as_strided, device
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
async_compile = AsyncCompile()


kernel_cpp_0 = async_compile.cpp('''
#include "/tmp/torchinductor_jenkins/ao/caomrguwaptybystzop6sbmdii67jqxwyhyzjizs5gbwosh2mdkg.h"
extern "C" void kernel(const bool* in_ptr0,
                       const bool* in_ptr1,
                       bool* out_ptr0,
                       bool* out_ptr1,
                       bool* out_ptr2,
                       bool* out_ptr3)
{
    #pragma omp parallel num_threads(4)
    {
        {
            #pragma omp for 
            for(long i0=0; i0<40; i0+=1)
            {
                auto tmp0 = in_ptr0[i0];
                auto tmp2 = in_ptr1[i0];
                auto tmp1 = tmp0 == 0;
                auto tmp3 = tmp0 | tmp2;
                auto tmp4 = tmp0 ^ tmp2;
                auto tmp5 = tmp0 & tmp2;
                out_ptr0[i0] = tmp1;
                out_ptr1[i0] = tmp3;
                out_ptr2[i0] = tmp4;
                out_ptr3[i0] = tmp5;
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    arg0_1, arg1_1 = args
    args.clear()
    buf0 = empty_strided((2, 20), (20, 1), device='cpu', dtype=torch.bool)
    buf1 = empty_strided((2, 20), (20, 1), device='cpu', dtype=torch.bool)
    buf2 = empty_strided((2, 20), (20, 1), device='cpu', dtype=torch.bool)
    buf3 = empty_strided((2, 20), (20, 1), device='cpu', dtype=torch.bool)
    kernel_cpp_0(c_void_p(arg0_1.data_ptr()), c_void_p(arg1_1.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(buf1.data_ptr()), c_void_p(buf2.data_ptr()), c_void_p(buf3.data_ptr()))
    del arg0_1
    del arg1_1
    return (buf0, buf1, buf2, buf3, )


def benchmark_compiled_module():
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    arg0_1 = rand_strided((2, 20), (20, 1), device='cpu', dtype=torch.bool)
    arg1_1 = rand_strided((2, 20), (20, 1), device='cpu', dtype=torch.bool)
    print_performance(lambda: call([arg0_1, arg1_1]))


if __name__ == "__main__":
    import argparse
    from torch._inductor.utils import benchmark_all_kernels

    parser = argparse.ArgumentParser()
    parser.add_argument("--benchmark-kernels", "-k", action="store_true", help="Whether to benchmark each individual kernels")
    parser.add_argument("--benchmark-all-configs", "-c", action="store_true", help="Whether to benchmark each individual config for a kernel")
    args = parser.parse_args()

    if args.benchmark_kernels:
        benchmark_all_kernels('None', args.benchmark_all_configs)
    else:
        benchmark_compiled_module()

