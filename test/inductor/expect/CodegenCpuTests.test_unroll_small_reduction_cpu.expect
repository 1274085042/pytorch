
from ctypes import c_void_p, c_long
import torch
import math
import random
from torch import empty_strided, as_strided, device
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
async_compile = AsyncCompile()


kernel_cpp_0 = async_compile.cpp('''
#include "/tmp/torchinductor_jenkins/ao/caomrguwaptybystzop6sbmdii67jqxwyhyzjizs5gbwosh2mdkg.h"
extern "C" void kernel(bool* in_out_ptr0,
                       const float* in_ptr0,
                       float* out_ptr0,
                       long* out_ptr1,
                       float* out_ptr2,
                       long* out_ptr3,
                       float* out_ptr4,
                       bool* out_ptr5,
                       long* out_ptr7,
                       long* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12)
{
    auto out_ptr6 = in_out_ptr0;
    #pragma omp parallel num_threads(4)
    {
        {
            #pragma omp for
            for(long i0=0; i0<8; i0+=1)
            {
                {
                    float tmp1 = std::numeric_limits<float>::infinity();
                    struct IndexValue_11 {size_t index; float value;};
                    IndexValue_11 tmp2{0, std::numeric_limits<float>::infinity()};
                    #pragma omp declare reduction(argmin : struct IndexValue_11 :\
                        omp_out.value = omp_in.value > omp_out.value ? omp_out.value : omp_in.value,\
                        omp_out.index = omp_in.value > omp_out.value ? omp_out.index : omp_in.index)\
                        initializer(omp_priv = {0, std::numeric_limits<float>::infinity()})
                    float tmp3 = -std::numeric_limits<float>::infinity();
                    struct IndexValue_12 {size_t index; float value;};
                    IndexValue_12 tmp4{0, -std::numeric_limits<float>::infinity()};
                    #pragma omp declare reduction(argmax : struct IndexValue_12 :\
                        omp_out.value = omp_in.value < omp_out.value ? omp_out.value : omp_in.value,\
                        omp_out.index = omp_in.value < omp_out.value ? omp_out.index : omp_in.index)\
                        initializer(omp_priv = {0, -std::numeric_limits<float>::infinity()})
                    float tmp5 = 0;
                    bool tmp10 = 0;
                    bool tmp16 = 0;
                    struct IndexValue_13 {size_t index; float value;};
                    IndexValue_13 tmp17{0, std::numeric_limits<float>::infinity()};
                    #pragma omp declare reduction(argmin : struct IndexValue_13 :\
                        omp_out.value = omp_in.value > omp_out.value ? omp_out.value : omp_in.value,\
                        omp_out.index = omp_in.value > omp_out.value ? omp_out.index : omp_in.index)\
                        initializer(omp_priv = {0, std::numeric_limits<float>::infinity()})
                    struct IndexValue_14 {size_t index; float value;};
                    IndexValue_14 tmp18{0, -std::numeric_limits<float>::infinity()};
                    #pragma omp declare reduction(argmax : struct IndexValue_14 :\
                        omp_out.value = omp_in.value < omp_out.value ? omp_out.value : omp_in.value,\
                        omp_out.index = omp_in.value < omp_out.value ? omp_out.index : omp_in.index)\
                        initializer(omp_priv = {0, -std::numeric_limits<float>::infinity()})
                    float tmp19 = std::numeric_limits<float>::infinity();
                    float tmp20 = -std::numeric_limits<float>::infinity();
                    for(long i1=0; i1<3; i1+=1)
                    {
                        auto tmp0 = in_ptr0[i1 + (3*i0)];
                        auto tmp6 = static_cast<float>(1);
                        auto tmp7 = tmp0 > tmp6;
                        auto tmp8 = static_cast<long>(tmp7);
                        auto tmp9 = static_cast<bool>(tmp8);
                        auto tmp11 = static_cast<float>(0);
                        auto tmp12 = tmp0 > tmp11;
                        auto tmp13 = tmp12 == 0;
                        auto tmp14 = static_cast<long>(tmp13);
                        auto tmp15 = static_cast<bool>(tmp14);
                        tmp1 = std::min(tmp1, tmp0);
                        if (tmp2.value > tmp0) {
                            tmp2.index = i1; tmp2.value = tmp0;
                        }
                        tmp3 = std::max(tmp3, tmp0);
                        if (tmp4.value < tmp0) {
                            tmp4.index = i1; tmp4.value = tmp0;
                        }
                        tmp5 += tmp0;
                        tmp10 = tmp10 || tmp9;
                        tmp16 = tmp16 || tmp15;
                        if (tmp17.value > tmp0) {
                            tmp17.index = i1; tmp17.value = tmp0;
                        }
                        if (tmp18.value < tmp0) {
                            tmp18.index = i1; tmp18.value = tmp0;
                        }
                        tmp19 = std::min(tmp19, tmp0);
                        tmp20 = std::max(tmp20, tmp0);
                    }
                    out_ptr0[i0] = tmp1;
                    out_ptr1[i0] = tmp2.index;
                    out_ptr2[i0] = tmp3;
                    out_ptr3[i0] = tmp4.index;
                    out_ptr4[i0] = tmp5;
                    out_ptr5[i0] = tmp10;
                    out_ptr6[i0] = tmp16;
                    out_ptr7[i0] = tmp17.index;
                    out_ptr8[i0] = tmp18.index;
                    out_ptr9[i0] = tmp19;
                    out_ptr10[i0] = tmp20;
                }
            }
        }
        {
            #pragma omp for
            for(long i0=0; i0<8; i0+=1)
            {
                auto tmp0 = out_ptr6[i0];
                auto tmp1 = tmp0 == 0;
                in_out_ptr0[i0] = tmp1;
            }
        }
    }
    {
        {
            #pragma omp declare reduction(min:at::vec::Vectorized<float>:omp_out = at::vec::minimum(omp_out, omp_in)) initializer(omp_priv={{std::numeric_limits<float>::infinity()}})
            float tmp1 = std::numeric_limits<float>::infinity();
            auto tmp1_vec = at::vec::Vectorized<float>(tmp1);
            #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={{-std::numeric_limits<float>::infinity()}})
            float tmp2 = -std::numeric_limits<float>::infinity();
            auto tmp2_vec = at::vec::Vectorized<float>(tmp2);
            #pragma omp parallel num_threads(4)
            {
                #pragma omp for reduction(min:tmp1_vec) reduction(max:tmp2_vec)
                for(long i0=0; i0<3; i0+=1)
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + 8*i0);
                    tmp1_vec = at::vec::minimum(tmp1_vec, tmp0);
                    tmp2_vec = at::vec::maximum(tmp2_vec, tmp0);
                }
                #pragma omp for simd simdlen(4) reduction(min:tmp1) reduction(max:tmp2)
                for(long i0=24; i0<24; i0+=1)
                {
                    auto tmp0 = in_ptr0[i0];
                    tmp1 = std::min(tmp1, tmp0);
                    tmp2 = std::max(tmp2, tmp0);
                }
            }
            tmp1 = std::min(tmp1, at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>&y) {return at::vec::minimum(x, y);}, tmp1_vec));
            tmp2 = std::max(tmp2, at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>&y) {return at::vec::maximum(x, y);}, tmp2_vec));
            out_ptr11[0] = tmp1;
            out_ptr12[0] = tmp2;
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    arg0_1, = args
    args.clear()
    buf0 = empty_strided((8, ), (1, ), device='cpu', dtype=torch.float32)
    buf1 = empty_strided((8, ), (1, ), device='cpu', dtype=torch.int64)
    buf2 = empty_strided((8, ), (1, ), device='cpu', dtype=torch.float32)
    buf3 = empty_strided((8, ), (1, ), device='cpu', dtype=torch.int64)
    buf4 = empty_strided((8, ), (1, ), device='cpu', dtype=torch.float32)
    buf5 = empty_strided((8, ), (1, ), device='cpu', dtype=torch.bool)
    buf6 = empty_strided((8, ), (1, ), device='cpu', dtype=torch.bool)
    buf8 = empty_strided((8, ), (1, ), device='cpu', dtype=torch.int64)
    buf9 = empty_strided((8, ), (1, ), device='cpu', dtype=torch.int64)
    buf10 = empty_strided((8, ), (1, ), device='cpu', dtype=torch.float32)
    buf11 = empty_strided((8, ), (1, ), device='cpu', dtype=torch.float32)
    buf7 = buf6; del buf6  # reuse
    buf12 = empty_strided((), (), device='cpu', dtype=torch.float32)
    buf13 = empty_strided((), (), device='cpu', dtype=torch.float32)
    kernel_cpp_0(c_void_p(buf7.data_ptr()), c_void_p(arg0_1.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(buf1.data_ptr()), c_void_p(buf2.data_ptr()), c_void_p(buf3.data_ptr()), c_void_p(buf4.data_ptr()), c_void_p(buf5.data_ptr()), c_void_p(buf8.data_ptr()), c_void_p(buf9.data_ptr()), c_void_p(buf10.data_ptr()), c_void_p(buf11.data_ptr()), c_void_p(buf12.data_ptr()), c_void_p(buf13.data_ptr()))
    del arg0_1
    return (buf0, buf1, buf2, buf3, buf4, buf5, buf7, buf8, buf9, buf10, buf11, buf12, buf13, )


def benchmark_compiled_module():
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    arg0_1 = rand_strided((8, 3), (3, 1), device='cpu', dtype=torch.float32)
    print_performance(lambda: call([arg0_1]))


if __name__ == "__main__":
    import argparse
    from torch._inductor.utils import benchmark_all_kernels

    parser = argparse.ArgumentParser()
    parser.add_argument("--benchmark-kernels", "-k", action="store_true", help="Whether to benchmark each individual kernels")
    parser.add_argument("--benchmark-all-configs", "-c", action="store_true", help="Whether to benchmark each individual config for a kernel")
    args = parser.parse_args()

    if args.benchmark_kernels:
        benchmark_all_kernels('None', args.benchmark_all_configs)
    else:
        benchmark_compiled_module()

