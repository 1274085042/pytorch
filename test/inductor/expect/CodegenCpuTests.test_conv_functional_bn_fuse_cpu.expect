
from ctypes import c_void_p, c_long
import torch
import math
import random
from torch import empty_strided, as_strided, device
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
async_compile = AsyncCompile()


kernel_cpp_0 = async_compile.cpp('''
#include "/tmp/torchinductor_jenkins/ao/caomrguwaptybystzop6sbmdii67jqxwyhyzjizs5gbwosh2mdkg.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(4)
    {
        {
            #pragma omp for 
            for(long i0=0; i0<0; i0+=1)
            {
                #pragma GCC ivdep
                for(long i1=0; i1<3892; i1+=1)
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long i0_inner = 0; i0_inner < 8; i0_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + (8*i1) + (31136*i0_inner) + (249088*i0));
                        tmp0.store(tmp1 + 8*i0_inner);
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + (8*i0) + (24*i1), 3);
                }
                #pragma GCC ivdep
                for(long i1=31136; i1<31136; i1+=1)
                {
                    for (long i0_inner = 0; i0_inner < 8; i0_inner++)
                    {
                        auto tmp0 = in_ptr0[i1 + (31136*i0_inner) + (249088*i0)];
                        out_ptr0[i0_inner + (3*i1) + (8*i0)] = tmp0;
                    }
                }
            }
            #pragma omp for 
            for(long i0=0; i0<3; i0+=1)
            {
                #pragma GCC ivdep
                for(long i1=0; i1<31136; i1+=1)
                {
                    auto tmp0 = in_ptr0[i1 + (31136*i0)];
                    out_ptr0[i0 + (3*i1)] = tmp0;
                }
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    arg0_1, arg1_1, arg2_1, arg3_1, arg4_1, arg5_1, arg6_1 = args
    args.clear()
    buf0 = empty_strided((1, 3, 556, 56), (93408, 1, 168, 3), device='cpu', dtype=torch.float32)
    kernel_cpp_0(c_void_p(arg6_1.data_ptr()), c_void_p(buf0.data_ptr()))
    del arg6_1
    buf1 = torch.ops.mkldnn._convolution_pointwise(buf0, arg2_1, arg3_1, (0, 0), (1, 1), (1, 1), 1, 'none', [], '')
    assert_size_stride(buf1, (1, 64, 554, 54), (1914624, 1, 3456, 64))
    del arg2_1
    del arg3_1
    return (buf1, )


def benchmark_compiled_module():
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    arg0_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg1_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg2_1 = rand_strided((64, 3, 3, 3), (1, 0, 0, 0), device='cpu', dtype=torch.float32)
    arg3_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg4_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg5_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg6_1 = rand_strided((1, 3, 556, 56), (93408, 31136, 56, 1), device='cpu', dtype=torch.float32)
    print_performance(lambda: call([arg0_1, arg1_1, arg2_1, arg3_1, arg4_1, arg5_1, arg6_1]))


if __name__ == "__main__":
    import argparse
    from torch._inductor.utils import benchmark_all_kernels

    parser = argparse.ArgumentParser()
    parser.add_argument("--benchmark-kernels", "-k", action="store_true", help="Whether to benchmark each individual kernels")
    parser.add_argument("--benchmark-all-configs", "-c", action="store_true", help="Whether to benchmark each individual config for a kernel")
    args = parser.parse_args()

    if args.benchmark_kernels:
        benchmark_all_kernels('None', args.benchmark_all_configs)
    else:
        benchmark_compiled_module()

