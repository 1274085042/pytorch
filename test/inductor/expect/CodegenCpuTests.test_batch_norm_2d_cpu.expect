
from ctypes import c_void_p, c_long
import torch
import math
import random
from torch import empty_strided, as_strided, device
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
async_compile = AsyncCompile()


kernel_cpp_0 = async_compile.cpp('''
#include "/tmp/torchinductor_jenkins/ao/caomrguwaptybystzop6sbmdii67jqxwyhyzjizs5gbwosh2mdkg.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       bool* out_ptr1)
{
    #pragma omp parallel num_threads(4)
    {
        {
            #pragma omp for  collapse(2)
            for(long i0=0; i0<3; i0+=1)
            {
                for(long i1=0; i1<10; i1+=1)
                {
                    for(long i2=0; i2<32; i2+=1)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + (8*i2) + (256*i1) + (2560*i0));
                        auto tmp1 = at::vec::Vectorized<float>(in_ptr1[i1]);
                        auto tmp3 = at::vec::Vectorized<float>(in_ptr2[i1]);
                        auto tmp11 = at::vec::Vectorized<float>(in_ptr3[i1]);
                        auto tmp13 = at::vec::Vectorized<float>(in_ptr4[i1]);
                        auto tmp2 = tmp0 - tmp1;
                        auto tmp4 = at::vec::Vectorized<float>(static_cast<float>(1e-05));
                        auto tmp5 = tmp3 + tmp4;
                        auto tmp6 = tmp5.sqrt();
                        auto tmp7 = tmp6.reciprocal();
                        auto tmp8 = at::vec::Vectorized<float>(static_cast<float>(1));
                        auto tmp9 = tmp7 * tmp8;
                        auto tmp10 = tmp2 * tmp9;
                        auto tmp12 = tmp10 * tmp11;
                        auto tmp14 = tmp12 + tmp13;
                        auto tmp15 = at::vec::clamp_min(tmp14, decltype(tmp14)(0));
                        tmp15.store(out_ptr0 + (8*i2) + (256*i1) + (2560*i0));
                    }
                    #pragma omp simd simdlen(4)
                    for(long i2=256; i2<256; i2+=1)
                    {
                        auto tmp0 = in_ptr0[i2 + (256*i1) + (2560*i0)];
                        auto tmp1 = in_ptr1[i1];
                        auto tmp3 = in_ptr2[i1];
                        auto tmp11 = in_ptr3[i1];
                        auto tmp13 = in_ptr4[i1];
                        auto tmp2 = tmp0 - tmp1;
                        auto tmp4 = static_cast<float>(1e-05);
                        auto tmp5 = tmp3 + tmp4;
                        auto tmp6 = std::sqrt(tmp5);
                        auto tmp7 = 1 / tmp6;
                        auto tmp8 = static_cast<float>(1);
                        auto tmp9 = tmp7 * tmp8;
                        auto tmp10 = tmp2 * tmp9;
                        auto tmp12 = tmp10 * tmp11;
                        auto tmp14 = tmp12 + tmp13;
                        auto tmp15 = tmp14 * (tmp14>0);
                        out_ptr0[i2 + (256*i1) + (2560*i0)] = tmp15;
                    }
                }
            }
        }
        {
            #pragma omp for
            for(long i0=0; i0<7680; i0+=1)
            {
                auto tmp0 = out_ptr0[i0];
                auto tmp1 = static_cast<float>(0);
                auto tmp2 = tmp0 <= tmp1;
                out_ptr1[i0] = tmp2;
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    primals_1, primals_2, primals_3, primals_4, primals_5, primals_6 = args
    args.clear()
    buf0 = empty_strided((3, 10, 16, 16), (2560, 256, 16, 1), device='cpu', dtype=torch.float32)
    buf1 = empty_strided((3, 10, 16, 16), (2560, 256, 16, 1), device='cpu', dtype=torch.bool)
    kernel_cpp_0(c_void_p(primals_6.data_ptr()), c_void_p(primals_3.data_ptr()), c_void_p(primals_4.data_ptr()), c_void_p(primals_1.data_ptr()), c_void_p(primals_2.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(buf1.data_ptr()))
    del primals_1
    del primals_2
    return (buf0, primals_3, primals_4, primals_6, buf1, )


def benchmark_compiled_module():
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    primals_1 = rand_strided((10, ), (1, ), device='cpu', dtype=torch.float32)
    primals_2 = rand_strided((10, ), (1, ), device='cpu', dtype=torch.float32)
    primals_3 = rand_strided((10, ), (1, ), device='cpu', dtype=torch.float32)
    primals_4 = rand_strided((10, ), (1, ), device='cpu', dtype=torch.float32)
    primals_5 = rand_strided((), (), device='cpu', dtype=torch.int64)
    primals_6 = rand_strided((3, 10, 16, 16), (2560, 256, 16, 1), device='cpu', dtype=torch.float32)
    print_performance(lambda: call([primals_1, primals_2, primals_3, primals_4, primals_5, primals_6]))


if __name__ == "__main__":
    import argparse
    from torch._inductor.utils import benchmark_all_kernels

    parser = argparse.ArgumentParser()
    parser.add_argument("--benchmark-kernels", "-k", action="store_true", help="Whether to benchmark each individual kernels")
    parser.add_argument("--benchmark-all-configs", "-c", action="store_true", help="Whether to benchmark each individual config for a kernel")
    args = parser.parse_args()

    if args.benchmark_kernels:
        benchmark_all_kernels('None', args.benchmark_all_configs)
    else:
        benchmark_compiled_module()

