
from ctypes import c_void_p, c_long
import torch
import math
import random
from torch import empty_strided, as_strided, device
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
async_compile = AsyncCompile()


kernel_cpp_0 = async_compile.cpp('''
#include "/tmp/torchinductor_jenkins/ao/caomrguwaptybystzop6sbmdii67jqxwyhyzjizs5gbwosh2mdkg.h"
extern "C" void kernel(float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    {
        auto tmp0 = static_cast<float>(4);
        auto tmp1 = static_cast<float>(3.3);
        auto tmp2 = tmp0 + tmp1;
        out_ptr0[0] = tmp2;
    }
    {
        auto tmp0 = static_cast<float>(3.3);
        auto tmp1 = static_cast<float>(4);
        auto tmp2 = tmp0 + tmp1;
        out_ptr1[0] = tmp2;
    }
    {
        auto tmp0 = static_cast<float>(4);
        auto tmp1 = static_cast<float>(3.3);
        auto tmp2 = tmp0 - tmp1;
        out_ptr2[0] = tmp2;
    }
    {
        auto tmp0 = static_cast<float>(3.3);
        auto tmp1 = static_cast<float>(4);
        auto tmp2 = tmp0 - tmp1;
        out_ptr3[0] = tmp2;
    }
    {
        auto tmp0 = static_cast<float>(4);
        auto tmp1 = static_cast<float>(3.3);
        auto tmp2 = tmp0 * tmp1;
        out_ptr4[0] = tmp2;
    }
    {
        auto tmp0 = static_cast<float>(3.3);
        auto tmp1 = static_cast<float>(4);
        auto tmp2 = tmp0 * tmp1;
        out_ptr5[0] = tmp2;
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    buf0 = empty_strided((), (), device='cpu', dtype=torch.float32)
    buf1 = empty_strided((), (), device='cpu', dtype=torch.float32)
    buf2 = empty_strided((), (), device='cpu', dtype=torch.float32)
    buf3 = empty_strided((), (), device='cpu', dtype=torch.float32)
    buf4 = empty_strided((), (), device='cpu', dtype=torch.float32)
    buf5 = empty_strided((), (), device='cpu', dtype=torch.float32)
    kernel_cpp_0(c_void_p(buf0.data_ptr()), c_void_p(buf1.data_ptr()), c_void_p(buf2.data_ptr()), c_void_p(buf3.data_ptr()), c_void_p(buf4.data_ptr()), c_void_p(buf5.data_ptr()))
    return (buf0, buf1, buf2, buf3, buf4, buf5, )


def benchmark_compiled_module():
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    print_performance(lambda: call([]))


if __name__ == "__main__":
    import argparse
    from torch._inductor.utils import benchmark_all_kernels

    parser = argparse.ArgumentParser()
    parser.add_argument("--benchmark-kernels", "-k", action="store_true", help="Whether to benchmark each individual kernels")
    parser.add_argument("--benchmark-all-configs", "-c", action="store_true", help="Whether to benchmark each individual config for a kernel")
    args = parser.parse_args()

    if args.benchmark_kernels:
        benchmark_all_kernels('None', args.benchmark_all_configs)
    else:
        benchmark_compiled_module()

