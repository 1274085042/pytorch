
from ctypes import c_void_p, c_long
import torch
import math
import random
from torch import empty_strided, as_strided, device
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
async_compile = AsyncCompile()


kernel_cpp_0 = async_compile.cpp('''
#include "/tmp/torchinductor_jenkins/ao/caomrguwaptybystzop6sbmdii67jqxwyhyzjizs5gbwosh2mdkg.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(4)
    {
        {
            #pragma omp for 
            for(long i0=0; i0<10; i0+=1)
            {
                #pragma GCC ivdep
                for(long i1=0; i1<10; i1+=1)
                {
                    auto tmp0 = static_cast<int>(7);
                    auto tmp1 = static_cast<int>(i0);
                    auto tmp2 = static_cast<int>(1);
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp4 = std::abs(tmp3);
                    auto tmp5 = tmp0 - tmp4;
                    auto tmp6 = std::abs(tmp5);
                    auto tmp7 = tmp0 - tmp6;
                    auto tmp8 = static_cast<int>(i1);
                    auto tmp9 = tmp8 - tmp2;
                    auto tmp10 = std::abs(tmp9);
                    auto tmp11 = tmp0 - tmp10;
                    auto tmp12 = std::abs(tmp11);
                    auto tmp13 = tmp0 - tmp12;
                    auto tmp14 = in_ptr0[tmp13 + (8*tmp7)];
                    out_ptr0[i1 + (10*i0)] = tmp14;
                }
            }
        }
        {
            #pragma omp for 
            for(long i0=0; i0<15; i0+=1)
            {
                #pragma GCC ivdep
                for(long i1=0; i1<11; i1+=1)
                {
                    auto tmp0 = static_cast<int>(7);
                    auto tmp1 = static_cast<int>(i0);
                    auto tmp2 = static_cast<int>(3);
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp4 = std::abs(tmp3);
                    auto tmp5 = tmp0 - tmp4;
                    auto tmp6 = std::abs(tmp5);
                    auto tmp7 = tmp0 - tmp6;
                    auto tmp8 = static_cast<int>(i1);
                    auto tmp9 = static_cast<int>(1);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp11 = std::abs(tmp10);
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp13 = std::abs(tmp12);
                    auto tmp14 = tmp0 - tmp13;
                    auto tmp15 = in_ptr0[tmp14 + (8*tmp7)];
                    out_ptr1[i1 + (11*i0)] = tmp15;
                }
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    arg0_1, = args
    args.clear()
    buf0 = empty_strided((1, 1, 10, 10), (100, 100, 10, 1), device='cpu', dtype=torch.float32)
    buf1 = empty_strided((1, 1, 15, 11), (165, 165, 11, 1), device='cpu', dtype=torch.float32)
    kernel_cpp_0(c_void_p(arg0_1.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(buf1.data_ptr()))
    del arg0_1
    return (buf0, buf1, )


def benchmark_compiled_module():
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    arg0_1 = rand_strided((1, 1, 8, 8), (64, 64, 8, 1), device='cpu', dtype=torch.float32)
    print_performance(lambda: call([arg0_1]))


if __name__ == "__main__":
    import argparse
    from torch._inductor.utils import benchmark_all_kernels

    parser = argparse.ArgumentParser()
    parser.add_argument("--benchmark-kernels", "-k", action="store_true", help="Whether to benchmark each individual kernels")
    parser.add_argument("--benchmark-all-configs", "-c", action="store_true", help="Whether to benchmark each individual config for a kernel")
    args = parser.parse_args()

    if args.benchmark_kernels:
        benchmark_all_kernels('None', args.benchmark_all_configs)
    else:
        benchmark_compiled_module()

