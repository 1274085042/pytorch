
from ctypes import c_void_p, c_long
import torch
import math
import random
from torch import empty_strided, as_strided, device
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
async_compile = AsyncCompile()


kernel_cpp_0 = async_compile.cpp('''
#include "/tmp/torchinductor_jenkins/ao/caomrguwaptybystzop6sbmdii67jqxwyhyzjizs5gbwosh2mdkg.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       float* in_out_ptr2,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8)
{
    auto out_ptr3 = in_out_ptr0;
    auto out_ptr4 = in_out_ptr1;
    auto out_ptr5 = in_out_ptr2;
    #pragma omp parallel num_threads(4)
    {
        {
            #pragma omp for 
            for(long i0=0; i0<8; i0+=1)
            {
                {
                    #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={{-std::numeric_limits<float>::infinity()}})
                    float tmp3 = -std::numeric_limits<float>::infinity();
                    auto tmp3_vec = at::vec::Vectorized<float>(tmp3);
                    float tmp4 = -std::numeric_limits<float>::infinity();
                    auto tmp4_vec = at::vec::Vectorized<float>(tmp4);
                    for(long i1=0; i1<1; i1+=1)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + (8*i0) + (8*i1));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + (8*i0) + (8*i1));
                        auto tmp2 = tmp0 + tmp1;
                        tmp3_vec = at::vec::maximum(tmp3_vec, tmp2);
                        tmp4_vec = at::vec::maximum(tmp4_vec, tmp1);
                    }
                    #pragma omp simd simdlen(4)  reduction(max:tmp3) reduction(max:tmp4)
                    for(long i1=8; i1<8; i1+=1)
                    {
                        auto tmp0 = in_ptr0[i1 + (8*i0)];
                        auto tmp1 = in_ptr1[i1 + (8*i0)];
                        auto tmp2 = tmp0 + tmp1;
                        tmp3 = std::max(tmp3, tmp2);
                        tmp4 = std::max(tmp4, tmp1);
                    }
                    tmp3 = std::max(tmp3, at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>&y) {return at::vec::maximum(x, y);}, tmp3_vec));
                    tmp4 = std::max(tmp4, at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>&y) {return at::vec::maximum(x, y);}, tmp4_vec));
                    out_ptr0[i0] = tmp3;
                    out_ptr1[i0] = tmp4;
                }
            }
        }
        {
            #pragma omp for 
            for(long i0=0; i0<8; i0+=1)
            {
                {
                    float tmp1 = -std::numeric_limits<float>::infinity();
                    for(long i1=0; i1<8; i1+=1)
                    {
                        auto tmp0 = in_ptr0[i0 + (8*i1)];
                        tmp1 = std::max(tmp1, tmp0);
                    }
                    out_ptr2[i0] = tmp1;
                }
            }
        }
        {
            #pragma omp for 
            for(long i0=0; i0<8; i0+=1)
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out += omp_in) initializer(omp_priv={{0}})
                    float tmp12 = 0;
                    auto tmp12_vec = at::vec::Vectorized<float>(tmp12);
                    for(long i1=0; i1<1; i1+=1)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + (8*i0) + (8*i1));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + (8*i0) + (8*i1));
                        auto tmp3 = at::vec::Vectorized<float>(out_ptr0[i0]);
                        auto tmp6 = at::vec::Vectorized<float>::loadu(out_ptr2 + 8*i1);
                        auto tmp9 = at::vec::Vectorized<float>(out_ptr1[i0]);
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        auto tmp7 = tmp0 - tmp6;
                        auto tmp8 = tmp7.exp();
                        auto tmp10 = tmp1 - tmp9;
                        auto tmp11 = tmp10.exp();
                        tmp5.store(out_ptr3 + (8*i0) + (8*i1));
                        tmp8.store(out_ptr4 + (8*i0) + (8*i1));
                        tmp11.store(out_ptr5 + (8*i0) + (8*i1));
                        tmp12_vec += tmp5;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp12)
                    for(long i1=8; i1<8; i1+=1)
                    {
                        auto tmp0 = in_ptr0[i1 + (8*i0)];
                        auto tmp1 = in_ptr1[i1 + (8*i0)];
                        auto tmp3 = out_ptr0[i0];
                        auto tmp6 = out_ptr2[i1];
                        auto tmp9 = out_ptr1[i0];
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = std::exp(tmp4);
                        auto tmp7 = tmp0 - tmp6;
                        auto tmp8 = std::exp(tmp7);
                        auto tmp10 = tmp1 - tmp9;
                        auto tmp11 = std::exp(tmp10);
                        out_ptr3[i1 + (8*i0)] = tmp5;
                        out_ptr4[i1 + (8*i0)] = tmp8;
                        out_ptr5[i1 + (8*i0)] = tmp11;
                        tmp12 += tmp5;
                    }
                    tmp12 += at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>&y) {return x + y;}, tmp12_vec);
                    out_ptr6[i0] = tmp12;
                }
            }
        }
        {
            #pragma omp for 
            for(long i0=0; i0<8; i0+=1)
            {
                for(long i1=0; i1<1; i1+=1)
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr3 + (8*i0) + (8*i1));
                    auto tmp1 = at::vec::Vectorized<float>(out_ptr6[i0]);
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(in_out_ptr0 + (8*i0) + (8*i1));
                }
                #pragma omp simd simdlen(4) 
                for(long i1=8; i1<8; i1+=1)
                {
                    auto tmp0 = out_ptr3[i1 + (8*i0)];
                    auto tmp1 = out_ptr6[i0];
                    auto tmp2 = tmp0 / tmp1;
                    in_out_ptr0[i1 + (8*i0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long i0=0; i0<8; i0+=1)
            {
                {
                    float tmp1 = 0;
                    for(long i1=0; i1<8; i1+=1)
                    {
                        auto tmp0 = out_ptr4[i0 + (8*i1)];
                        tmp1 += tmp0;
                    }
                    out_ptr7[i0] = tmp1;
                }
            }
        }
        {
            #pragma omp for 
            for(long i0=0; i0<8; i0+=1)
            {
                for(long i1=0; i1<1; i1+=1)
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr4 + (8*i0) + (8*i1));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr7 + 8*i1);
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(in_out_ptr1 + (8*i0) + (8*i1));
                }
                #pragma omp simd simdlen(4) 
                for(long i1=8; i1<8; i1+=1)
                {
                    auto tmp0 = out_ptr4[i1 + (8*i0)];
                    auto tmp1 = out_ptr7[i1];
                    auto tmp2 = tmp0 / tmp1;
                    in_out_ptr1[i1 + (8*i0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long i0=0; i0<8; i0+=1)
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out += omp_in) initializer(omp_priv={{0}})
                    float tmp1 = 0;
                    auto tmp1_vec = at::vec::Vectorized<float>(tmp1);
                    for(long i1=0; i1<1; i1+=1)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr5 + (8*i0) + (8*i1));
                        tmp1_vec += tmp0;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp1)
                    for(long i1=8; i1<8; i1+=1)
                    {
                        auto tmp0 = out_ptr5[i1 + (8*i0)];
                        tmp1 += tmp0;
                    }
                    tmp1 += at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>&y) {return x + y;}, tmp1_vec);
                    out_ptr8[i0] = tmp1;
                }
            }
        }
        {
            #pragma omp for 
            for(long i0=0; i0<8; i0+=1)
            {
                for(long i1=0; i1<1; i1+=1)
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr5 + (8*i0) + (8*i1));
                    auto tmp1 = at::vec::Vectorized<float>(out_ptr8[i0]);
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(in_out_ptr2 + (8*i0) + (8*i1));
                }
                #pragma omp simd simdlen(4) 
                for(long i1=8; i1<8; i1+=1)
                {
                    auto tmp0 = out_ptr5[i1 + (8*i0)];
                    auto tmp1 = out_ptr8[i0];
                    auto tmp2 = tmp0 / tmp1;
                    in_out_ptr2[i1 + (8*i0)] = tmp2;
                }
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    arg0_1, arg1_1 = args
    args.clear()
    buf0 = empty_strided((8, 1), (1, 8), device='cpu', dtype=torch.float32)
    buf8 = empty_strided((8, 1), (1, 8), device='cpu', dtype=torch.float32)
    buf4 = empty_strided((1, 8), (8, 1), device='cpu', dtype=torch.float32)
    buf1 = empty_strided((8, 8), (8, 1), device='cpu', dtype=torch.float32)
    buf5 = empty_strided((8, 8), (8, 1), device='cpu', dtype=torch.float32)
    buf9 = empty_strided((8, 8), (8, 1), device='cpu', dtype=torch.float32)
    buf2 = empty_strided((8, 1), (1, 8), device='cpu', dtype=torch.float32)
    buf3 = buf1; del buf1  # reuse
    buf6 = empty_strided((1, 8), (8, 1), device='cpu', dtype=torch.float32)
    buf7 = buf5; del buf5  # reuse
    buf10 = empty_strided((8, 1), (1, 8), device='cpu', dtype=torch.float32)
    buf11 = buf9; del buf9  # reuse
    kernel_cpp_0(c_void_p(buf3.data_ptr()), c_void_p(buf7.data_ptr()), c_void_p(buf11.data_ptr()), c_void_p(arg0_1.data_ptr()), c_void_p(arg1_1.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(buf8.data_ptr()), c_void_p(buf4.data_ptr()), c_void_p(buf2.data_ptr()), c_void_p(buf6.data_ptr()), c_void_p(buf10.data_ptr()))
    del arg0_1
    del arg1_1
    return (buf3, buf7, buf11, )


def benchmark_compiled_module():
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    arg0_1 = rand_strided((8, 8), (8, 1), device='cpu', dtype=torch.float32)
    arg1_1 = rand_strided((8, 8), (8, 1), device='cpu', dtype=torch.float32)
    print_performance(lambda: call([arg0_1, arg1_1]))


if __name__ == "__main__":
    import argparse
    from torch._inductor.utils import benchmark_all_kernels

    parser = argparse.ArgumentParser()
    parser.add_argument("--benchmark-kernels", "-k", action="store_true", help="Whether to benchmark each individual kernels")
    parser.add_argument("--benchmark-all-configs", "-c", action="store_true", help="Whether to benchmark each individual config for a kernel")
    args = parser.parse_args()

    if args.benchmark_kernels:
        benchmark_all_kernels('None', args.benchmark_all_configs)
    else:
        benchmark_compiled_module()

