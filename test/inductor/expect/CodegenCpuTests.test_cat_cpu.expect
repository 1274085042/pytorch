
from ctypes import c_void_p, c_long
import torch
import math
import random
from torch import empty_strided, as_strided, device
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
async_compile = AsyncCompile()


kernel_cpp_0 = async_compile.cpp('''
#include "/tmp/torchinductor_jenkins/ao/caomrguwaptybystzop6sbmdii67jqxwyhyzjizs5gbwosh2mdkg.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const double* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       double* out_ptr5,
                       double* out_ptr6,
                       float* out_ptr7,
                       double* out_ptr8)
{
    #pragma omp parallel num_threads(4)
    {
        {
            #pragma omp for 
            for(long i0=0; i0<3; i0+=1)
            {
                for(long i1=0; i1<6; i1+=1)
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + (8*i1) + (48*i0));
                    auto tmp1 = at::vec::Vectorized<float>(static_cast<float>(1));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp3 = at::vec::Vectorized<float>(static_cast<float>(2));
                    auto tmp4 = tmp0 + tmp3;
                    tmp0.store(out_ptr0 + (8*i1) + (144*i0));
                    tmp2.store(out_ptr1 + (8*i1) + (144*i0));
                    tmp4.store(out_ptr2 + (8*i1) + (144*i0));
                }
                #pragma omp simd simdlen(4) 
                for(long i1=48; i1<48; i1+=1)
                {
                    auto tmp0 = in_ptr0[i1 + (48*i0)];
                    auto tmp1 = static_cast<float>(1);
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp3 = static_cast<float>(2);
                    auto tmp4 = tmp0 + tmp3;
                    out_ptr0[i1 + (144*i0)] = tmp0;
                    out_ptr1[i1 + (144*i0)] = tmp2;
                    out_ptr2[i1 + (144*i0)] = tmp4;
                }
            }
        }
        {
            #pragma omp for 
            for(long i0=0; i0<0; i0+=1)
            {
                #pragma GCC ivdep
                for(long i1=0; i1<6; i1+=1)
                {
                    float tmp0[8*8] __attribute__ ((aligned (8)));
                    at::vec::transpose_mxn<float,8,8>(in_ptr0 + (8*i0) + (24*i1), 3, tmp0, 8);
                    for (long i0_inner = 0; i0_inner < 8; i0_inner++)
                    {
                        auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + 8*i0_inner);
                        auto tmp2 = at::vec::Vectorized<float>(static_cast<float>(2));
                        auto tmp3 = tmp1 * tmp2;
                        tmp3.store(out_ptr3 + (8*i1) + (48*i0_inner) + (384*i0));
                    }
                }
                #pragma GCC ivdep
                for(long i1=48; i1<48; i1+=1)
                {
                    for (long i0_inner = 0; i0_inner < 8; i0_inner++)
                    {
                        auto tmp0 = in_ptr0[i0_inner + (3*i1) + (8*i0)];
                        auto tmp1 = static_cast<float>(2);
                        auto tmp2 = tmp0 * tmp1;
                        out_ptr3[i1 + (48*i0_inner) + (384*i0)] = tmp2;
                    }
                }
            }
            #pragma omp for 
            for(long i0=0; i0<3; i0+=1)
            {
                #pragma GCC ivdep
                for(long i1=0; i1<48; i1+=1)
                {
                    auto tmp0 = in_ptr0[i0 + (3*i1)];
                    auto tmp1 = static_cast<float>(2);
                    auto tmp2 = tmp0 * tmp1;
                    out_ptr3[i1 + (48*i0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long i0=0; i0<144; i0+=1)
            {
                auto tmp0 = out_ptr3[i0];
                auto tmp1 = static_cast<double>(tmp0);
                out_ptr4[i0] = tmp0;
                out_ptr5[i0] = tmp1;
                out_ptr6[i0] = tmp1;
            }
        }
        {
            #pragma omp for 
            for(long i0=0; i0<2; i0+=1)
            {
                #pragma GCC ivdep
                for(long i1=0; i1<0; i1+=1)
                {
                    #pragma GCC ivdep
                    for(long i2=0; i2<6; i2+=1)
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long i1_inner = 0; i1_inner < 8; i1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + (8*i2) + (48*i1_inner) + (144*i0) + (384*i1));
                            tmp0.store(tmp1 + 8*i1_inner);
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr7 + (8*i1) + (24*i2) + (144*i0), 3);
                    }
                    #pragma GCC ivdep
                    for(long i2=48; i2<48; i2+=1)
                    {
                        for (long i1_inner = 0; i1_inner < 8; i1_inner++)
                        {
                            auto tmp0 = in_ptr1[i2 + (48*i1_inner) + (144*i0) + (384*i1)];
                            out_ptr7[i1_inner + (3*i2) + (8*i1) + (144*i0)] = tmp0;
                        }
                    }
                }
                #pragma GCC ivdep
                for(long i1=0; i1<3; i1+=1)
                {
                    #pragma GCC ivdep
                    for(long i2=0; i2<48; i2+=1)
                    {
                        auto tmp0 = in_ptr1[i2 + (48*i1) + (144*i0)];
                        out_ptr7[i1 + (3*i2) + (144*i0)] = tmp0;
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(3)
            for(long i0=0; i0<2; i0+=1)
            {
                for(long i1=0; i1<3; i1+=1)
                {
                    for(long i2=0; i2<48; i2+=1)
                    {
                        auto tmp0 = in_ptr2[i2 + (48*i1) + (144*i0)];
                        out_ptr8[i1 + (3*i2) + (144*i0)] = tmp0;
                    }
                }
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    arg0_1, = args
    args.clear()
    buf3 = empty_strided((1, 3, 3, 48), (432, 1, 144, 3), device='cpu', dtype=torch.float32)
    buf0 = as_strided(buf3, (1, 3, 3, 16), (432, 1, 144, 3))  # alias
    buf1 = as_strided(buf3, (1, 3, 3, 16), (432, 1, 144, 3), 48)  # alias
    buf2 = as_strided(buf3, (1, 3, 3, 16), (432, 1, 144, 3), 96)  # alias
    buf6 = empty_strided((2, 3, 3, 16), (144, 48, 16, 1), device='cpu', dtype=torch.float32)
    buf4 = as_strided(buf6, (1, 3, 3, 16), (144, 48, 16, 1))  # alias
    buf5 = as_strided(buf6, (1, 3, 3, 16), (144, 48, 16, 1), 144)  # alias
    buf10 = empty_strided((2, 3, 3, 16), (144, 48, 16, 1), device='cpu', dtype=torch.float64)
    buf8 = as_strided(buf10, (1, 3, 3, 16), (144, 48, 16, 1))  # alias
    buf9 = as_strided(buf10, (1, 3, 3, 16), (144, 48, 16, 1), 144)  # alias
    buf7 = empty_strided((2, 3, 3, 16), (144, 1, 48, 3), device='cpu', dtype=torch.float32)
    buf11 = empty_strided((2, 3, 3, 16), (144, 1, 48, 3), device='cpu', dtype=torch.float64)
    kernel_cpp_0(c_void_p(arg0_1.data_ptr()), c_void_p(buf6.data_ptr()), c_void_p(buf10.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(buf1.data_ptr()), c_void_p(buf2.data_ptr()), c_void_p(buf4.data_ptr()), c_void_p(buf5.data_ptr()), c_void_p(buf8.data_ptr()), c_void_p(buf9.data_ptr()), c_void_p(buf7.data_ptr()), c_void_p(buf11.data_ptr()))
    del arg0_1
    del buf10
    del buf4
    del buf5
    del buf6
    del buf8
    del buf9
    return (buf3, buf7, buf11, )


def benchmark_compiled_module():
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    arg0_1 = rand_strided((1, 3, 3, 16), (144, 1, 48, 3), device='cpu', dtype=torch.float32)
    print_performance(lambda: call([arg0_1]))


if __name__ == "__main__":
    import argparse
    from torch._inductor.utils import benchmark_all_kernels

    parser = argparse.ArgumentParser()
    parser.add_argument("--benchmark-kernels", "-k", action="store_true", help="Whether to benchmark each individual kernels")
    parser.add_argument("--benchmark-all-configs", "-c", action="store_true", help="Whether to benchmark each individual config for a kernel")
    args = parser.parse_args()

    if args.benchmark_kernels:
        benchmark_all_kernels('None', args.benchmark_all_configs)
    else:
        benchmark_compiled_module()

