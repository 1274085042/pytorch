
from ctypes import c_void_p, c_long
import torch
import math
import random
from torch import empty_strided, as_strided, device
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
async_compile = AsyncCompile()


kernel_cpp_0 = async_compile.cpp('''
#include "/tmp/torchinductor_jenkins/ao/caomrguwaptybystzop6sbmdii67jqxwyhyzjizs5gbwosh2mdkg.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(4)
    {
        {
            #pragma omp for  collapse(2)
            for(long i0=0; i0<2; i0+=1)
            {
                for(long i1=0; i1<10; i1+=1)
                {
                    #pragma GCC ivdep
                    for(long i2=0; i2<10; i2+=1)
                    {
                        auto tmp5 = in_ptr0[i2 + (10*i1) + (100*i0)];
                        auto tmp0 = static_cast<long>(i2);
                        auto tmp1 = static_cast<long>(i1);
                        auto tmp2 = tmp0 - tmp1;
                        auto tmp3 = static_cast<long>(1);
                        auto tmp4 = tmp2 >= tmp3;
                        auto tmp6 = static_cast<float>(0);
                        auto tmp7 = tmp4 ? tmp5 : tmp6;
                        auto tmp8 = static_cast<long>(0);
                        auto tmp9 = tmp2 >= tmp8;
                        auto tmp10 = tmp9 ? tmp5 : tmp6;
                        auto tmp11 = static_cast<long>(2);
                        auto tmp12 = tmp2 >= tmp11;
                        auto tmp13 = tmp12 ? tmp5 : tmp6;
                        out_ptr0[i2 + (10*i1) + (100*i0)] = tmp7;
                        out_ptr1[i2 + (10*i1) + (100*i0)] = tmp10;
                        out_ptr2[i2 + (10*i1) + (100*i0)] = tmp13;
                    }
                }
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    arg0_1, = args
    args.clear()
    buf0 = empty_strided((2, 10, 10), (100, 10, 1), device='cpu', dtype=torch.float32)
    buf1 = empty_strided((2, 10, 10), (100, 10, 1), device='cpu', dtype=torch.float32)
    buf2 = empty_strided((2, 10, 10), (100, 10, 1), device='cpu', dtype=torch.float32)
    kernel_cpp_0(c_void_p(arg0_1.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(buf1.data_ptr()), c_void_p(buf2.data_ptr()))
    del arg0_1
    return (buf0, buf1, buf2, )


def benchmark_compiled_module():
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    arg0_1 = rand_strided((2, 10, 10), (100, 10, 1), device='cpu', dtype=torch.float32)
    print_performance(lambda: call([arg0_1]))


if __name__ == "__main__":
    import argparse
    from torch._inductor.utils import benchmark_all_kernels

    parser = argparse.ArgumentParser()
    parser.add_argument("--benchmark-kernels", "-k", action="store_true", help="Whether to benchmark each individual kernels")
    parser.add_argument("--benchmark-all-configs", "-c", action="store_true", help="Whether to benchmark each individual config for a kernel")
    args = parser.parse_args()

    if args.benchmark_kernels:
        benchmark_all_kernels('None', args.benchmark_all_configs)
    else:
        benchmark_compiled_module()

