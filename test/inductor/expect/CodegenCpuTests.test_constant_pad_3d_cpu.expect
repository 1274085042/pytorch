
from ctypes import c_void_p, c_long
import torch
import math
import random
from torch import empty_strided, as_strided, device
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
async_compile = AsyncCompile()


kernel_cpp_0 = async_compile.cpp('''
#include "/tmp/torchinductor_jenkins/ao/caomrguwaptybystzop6sbmdii67jqxwyhyzjizs5gbwosh2mdkg.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(4)
    {
        {
            #pragma omp for  collapse(2)
            for(long i0=0; i0<2; i0+=1)
            {
                for(long i1=0; i1<15; i1+=1)
                {
                    #pragma GCC ivdep
                    for(long i2=0; i2<11; i2+=1)
                    {
                        #pragma GCC ivdep
                        for(long i3=0; i3<7; i3+=1)
                        {
                            auto tmp0 = static_cast<long>((-5) + i1);
                            auto tmp1 = static_cast<long>(0);
                            auto tmp2 = tmp0 >= tmp1;
                            auto tmp3 = static_cast<long>(4);
                            auto tmp4 = tmp0 < tmp3;
                            auto tmp5 = static_cast<long>((-3) + i2);
                            auto tmp6 = tmp5 >= tmp1;
                            auto tmp7 = tmp5 < tmp3;
                            auto tmp8 = static_cast<long>((-1) + i3);
                            auto tmp9 = tmp8 >= tmp1;
                            auto tmp10 = tmp8 < tmp3;
                            auto tmp11 = tmp2 & tmp4;
                            auto tmp12 = tmp11 & tmp6;
                            auto tmp13 = tmp12 & tmp7;
                            auto tmp14 = tmp13 & tmp9;
                            auto tmp15 = tmp14 & tmp10;
                            auto tmp16 = [&]
                            {
                                auto tmp17 = in_ptr0[(-93) + i3 + (4*i2) + (16*i1) + (64*i0)];
                                return tmp17;
                            }
                            ;
                            auto tmp18 = tmp15 ? tmp16() : static_cast<decltype(tmp16())>(6.0);
                            out_ptr0[i3 + (7*i2) + (77*i1) + (1155*i0)] = tmp18;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for
            for(long i0=0; i0<8; i0+=1)
            {
                #pragma GCC ivdep
                for(long i1=0; i1<11; i1+=1)
                {
                    for(long i2=0; i2<0; i2+=1)
                    {
                        auto tmp0 = at::vec::Vectorized<int>(static_cast<int>((-3) + i1));
                        auto tmp1 = at::vec::Vectorized<int>(static_cast<int>(0));
                        auto tmp2 = to_float_mask(tmp0 >= tmp1);
                        auto tmp3 = at::vec::Vectorized<int>(static_cast<int>(4));
                        auto tmp4 = to_float_mask(tmp0 < tmp3);
                        auto tmp5 = tmp2 & tmp4;
                        auto tmp6 = [&]
                        {
                            auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr0 + (-12) + (4*i1) + (8*i2) + (16*i0));
                            return tmp7;
                        }
                        ;
                        auto tmp8 = decltype(tmp6())::blendv(at::vec::Vectorized<float>(6.0), tmp6(), to_float_mask(tmp5));
                        tmp8.store(out_ptr1 + (4*i1) + (8*i2) + (44*i0));
                    }
                    #pragma omp simd simdlen(4)
                    for(long i2=0; i2<4; i2+=1)
                    {
                        auto tmp0 = static_cast<long>((-3) + i1);
                        auto tmp1 = static_cast<long>(0);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = static_cast<long>(4);
                        auto tmp4 = tmp0 < tmp3;
                        auto tmp5 = tmp2 & tmp4;
                        auto tmp6 = [&]
                        {
                            auto tmp7 = in_ptr0[(-12) + i2 + (4*i1) + (16*i0)];
                            return tmp7;
                        }
                        ;
                        auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(6.0);
                        out_ptr1[i2 + (4*i1) + (44*i0)] = tmp8;
                    }
                }
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    arg0_1, = args
    args.clear()
    buf0 = empty_strided((2, 15, 11, 7), (1155, 77, 7, 1), device='cpu', dtype=torch.float32)
    buf1 = empty_strided((2, 4, 11, 4), (176, 44, 4, 1), device='cpu', dtype=torch.float32)
    kernel_cpp_0(c_void_p(arg0_1.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(buf1.data_ptr()))
    del arg0_1
    return (buf0, buf1, )


def benchmark_compiled_module():
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    arg0_1 = rand_strided((2, 4, 4, 4), (64, 16, 4, 1), device='cpu', dtype=torch.float32)
    print_performance(lambda: call([arg0_1]))


if __name__ == "__main__":
    import argparse
    from torch._inductor.utils import benchmark_all_kernels

    parser = argparse.ArgumentParser()
    parser.add_argument("--benchmark-kernels", "-k", action="store_true", help="Whether to benchmark each individual kernels")
    parser.add_argument("--benchmark-all-configs", "-c", action="store_true", help="Whether to benchmark each individual config for a kernel")
    args = parser.parse_args()

    if args.benchmark_kernels:
        benchmark_all_kernels('None', args.benchmark_all_configs)
    else:
        benchmark_compiled_module()

