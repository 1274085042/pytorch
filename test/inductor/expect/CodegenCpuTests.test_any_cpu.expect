
from ctypes import c_void_p, c_long
import torch
import math
import random
from torch import empty_strided, as_strided, device
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
async_compile = AsyncCompile()


kernel_cpp_0 = async_compile.cpp('''
#include "/tmp/torchinductor_jenkins/ao/caomrguwaptybystzop6sbmdii67jqxwyhyzjizs5gbwosh2mdkg.h"
extern "C" void kernel(bool* in_out_ptr0,
                       bool* in_out_ptr1,
                       const float* in_ptr0,
                       bool* out_ptr0,
                       bool* out_ptr1)
{
    auto out_ptr3 = in_out_ptr0;
    auto out_ptr2 = in_out_ptr1;
    #pragma omp parallel num_threads(4)
    {
        {
            #pragma omp for
            for(long i0=0; i0<16; i0+=1)
            {
                {
                    bool tmp2 = 0;
                    for(long i1=0; i1<8; i1+=1)
                    {
                        auto tmp0 = in_ptr0[i1 + (8*i0)];
                        auto tmp1 = static_cast<bool>(tmp0);
                        tmp2 = tmp2 || tmp1;
                    }
                    out_ptr0[i0] = tmp2;
                }
            }
        }
    }
    {
        {
            bool tmp2 = 0;
            bool tmp5 = 0;
            #pragma omp parallel num_threads(4)
            {
                #pragma omp for reduction(||:tmp2) reduction(||:tmp5)
                for(long i0=0; i0<128; i0+=1)
                {
                    auto tmp0 = in_ptr0[i0];
                    auto tmp1 = std::isinf(tmp0);
                    auto tmp3 = tmp1 == 0;
                    auto tmp4 = tmp3 == 0;
                    tmp2 = tmp2 || tmp1;
                    tmp5 = tmp5 || tmp4;
                }
            }
            out_ptr1[0] = tmp2;
            out_ptr2[0] = tmp5;
        }
    }
    #pragma omp parallel num_threads(4)
    {
        {
            #pragma omp for
            for(long i0=0; i0<8; i0+=1)
            {
                {
                    bool tmp5 = 0;
                    for(long i1=0; i1<16; i1+=1)
                    {
                        auto tmp0 = in_ptr0[i0 + (8*i1)];
                        auto tmp1 = std::isinf(tmp0);
                        auto tmp2 = tmp1 == 0;
                        auto tmp3 = static_cast<long>(tmp2);
                        auto tmp4 = static_cast<bool>(tmp3);
                        tmp5 = tmp5 || tmp4;
                    }
                    out_ptr3[i0] = tmp5;
                }
            }
        }
        {
            #pragma omp for
            for(long i0=0; i0<8; i0+=1)
            {
                auto tmp0 = out_ptr3[i0];
                auto tmp1 = tmp0 == 0;
                in_out_ptr0[i0] = tmp1;
            }
        }
        #pragma omp single
        {
            {
                auto tmp0 = out_ptr2[0];
                auto tmp1 = tmp0 == 0;
                in_out_ptr1[0] = tmp1;
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    arg0_1, = args
    args.clear()
    buf0 = empty_strided((16, ), (1, ), device='cpu', dtype=torch.bool)
    buf1 = empty_strided((), (), device='cpu', dtype=torch.bool)
    buf4 = empty_strided((), (), device='cpu', dtype=torch.bool)
    buf2 = empty_strided((8, ), (1, ), device='cpu', dtype=torch.bool)
    buf3 = buf2; del buf2  # reuse
    buf5 = buf4; del buf4  # reuse
    kernel_cpp_0(c_void_p(buf3.data_ptr()), c_void_p(buf5.data_ptr()), c_void_p(arg0_1.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(buf1.data_ptr()))
    del arg0_1
    return (buf0, buf1, buf3, buf5, )


def benchmark_compiled_module():
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    arg0_1 = rand_strided((16, 8), (8, 1), device='cpu', dtype=torch.float32)
    print_performance(lambda: call([arg0_1]))


if __name__ == "__main__":
    import argparse
    from torch._inductor.utils import benchmark_all_kernels

    parser = argparse.ArgumentParser()
    parser.add_argument("--benchmark-kernels", "-k", action="store_true", help="Whether to benchmark each individual kernels")
    parser.add_argument("--benchmark-all-configs", "-c", action="store_true", help="Whether to benchmark each individual config for a kernel")
    args = parser.parse_args()

    if args.benchmark_kernels:
        benchmark_all_kernels('None', args.benchmark_all_configs)
    else:
        benchmark_compiled_module()

